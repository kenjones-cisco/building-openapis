{
    "docs": [
        {
            "location": "/", 
            "text": "Building OpenAPIs\n\n\nThere are many different resources that provides part of the story about building APIs, specially OpenAPIs.\n\n\nThese collated resource (reference to original sources provided) should help expedite the ability to\nstart building RESTful APIs.\n\n\nThe resources include reference information on the topic of REST and OpenAPI, best practices, and tutorials\non how to get started building your own RESTful APIs using an industry standard API specification and the growing\necosystem of tools.\n\n\nFeedback and Contributions Welcome", 
            "title": "Overview"
        }, 
        {
            "location": "/#building-openapis", 
            "text": "There are many different resources that provides part of the story about building APIs, specially OpenAPIs.  These collated resource (reference to original sources provided) should help expedite the ability to\nstart building RESTful APIs.  The resources include reference information on the topic of REST and OpenAPI, best practices, and tutorials\non how to get started building your own RESTful APIs using an industry standard API specification and the growing\necosystem of tools.  Feedback and Contributions Welcome", 
            "title": "Building OpenAPIs"
        }, 
        {
            "location": "/references/rest/", 
            "text": "Understanding REST\n\n\nRepresentational State Transfer (REST) architectural style for distributed hypermedia systems,\ndescribing the software engineering principles guiding REST and the interaction constraints chosen\nto retain those principles.\n\n\nCredit: \nREST Source\n\n\nThe constraints of REST.\n\n\n\n\nUniform Interface\n\n\nStateless\n\n\nCacheable\n\n\nClient-Server\n\n\nLayered System\n\n\n\n\nUniform Interface\n\n\nThe uniform interface constraint defines the interface between clients and servers. It simplifies\nand decouples the architecture, which enables each part to evolve independently.\n\n\nGuiding Principles\n\n\n\n\nResource Based\n\n\nManipulation of Resources Through Representations\n\n\nSelf-descriptive Messages\n\n\nHypermedia as the Engine of Application State (HATEOAS)\n\n\n\n\nStateless\n\n\nAs REST is an acronym for REpresentational State Transfer, statelessness is key.\nEssentially, what this means is that the necessary state to handle the request is contained\nwithin the request itself, whether as part of the URI, query-string parameters, body, or headers.\nThe URI uniquely identifies the resource and the body contains the state (or state change)\nof that resource. Then after the server does it's processing, the appropriate state, or the\npiece(s) of state that matter, are communicated back to the client via headers, status and\nresponse body.\n\n\nCacheable\n\n\nAs on the World Wide Web, clients can cache responses. Responses must therefore, implicitly\nor explicitly, define themselves as cacheable, or not, to prevent clients reusing stale or\ninappropriate data in response to further requests. Well-managed caching partially or completely\neliminates some client\u2013server interactions, further improving scalability and performance.\n\n\nClient-Server\n\n\nThe uniform interface separates clients from servers. This separation of concerns means that,\nfor example, clients are not concerned with data storage, which remains internal to each server,\nso that the portability of client code is improved. Servers are not concerned with the user\ninterface or user state, so that servers can be simpler and more scalable. Servers and clients\nmay also be replaced and developed independently, as long as the interface is not altered.\n\n\nLayered System\n\n\nA client cannot ordinarily tell whether it is connected directly to the end server, or to an\nintermediary along the way. Intermediary servers may improve system scalability by enabling\nload-balancing and by providing shared caches. Layers may also enforce security policies.", 
            "title": "REST APIs"
        }, 
        {
            "location": "/references/rest/#understanding-rest", 
            "text": "Representational State Transfer (REST) architectural style for distributed hypermedia systems,\ndescribing the software engineering principles guiding REST and the interaction constraints chosen\nto retain those principles.  Credit:  REST Source  The constraints of REST.   Uniform Interface  Stateless  Cacheable  Client-Server  Layered System", 
            "title": "Understanding REST"
        }, 
        {
            "location": "/references/rest/#uniform-interface", 
            "text": "The uniform interface constraint defines the interface between clients and servers. It simplifies\nand decouples the architecture, which enables each part to evolve independently.  Guiding Principles   Resource Based  Manipulation of Resources Through Representations  Self-descriptive Messages  Hypermedia as the Engine of Application State (HATEOAS)", 
            "title": "Uniform Interface"
        }, 
        {
            "location": "/references/rest/#stateless", 
            "text": "As REST is an acronym for REpresentational State Transfer, statelessness is key.\nEssentially, what this means is that the necessary state to handle the request is contained\nwithin the request itself, whether as part of the URI, query-string parameters, body, or headers.\nThe URI uniquely identifies the resource and the body contains the state (or state change)\nof that resource. Then after the server does it's processing, the appropriate state, or the\npiece(s) of state that matter, are communicated back to the client via headers, status and\nresponse body.", 
            "title": "Stateless"
        }, 
        {
            "location": "/references/rest/#cacheable", 
            "text": "As on the World Wide Web, clients can cache responses. Responses must therefore, implicitly\nor explicitly, define themselves as cacheable, or not, to prevent clients reusing stale or\ninappropriate data in response to further requests. Well-managed caching partially or completely\neliminates some client\u2013server interactions, further improving scalability and performance.", 
            "title": "Cacheable"
        }, 
        {
            "location": "/references/rest/#client-server", 
            "text": "The uniform interface separates clients from servers. This separation of concerns means that,\nfor example, clients are not concerned with data storage, which remains internal to each server,\nso that the portability of client code is improved. Servers are not concerned with the user\ninterface or user state, so that servers can be simpler and more scalable. Servers and clients\nmay also be replaced and developed independently, as long as the interface is not altered.", 
            "title": "Client-Server"
        }, 
        {
            "location": "/references/rest/#layered-system", 
            "text": "A client cannot ordinarily tell whether it is connected directly to the end server, or to an\nintermediary along the way. Intermediary servers may improve system scalability by enabling\nload-balancing and by providing shared caches. Layers may also enforce security policies.", 
            "title": "Layered System"
        }, 
        {
            "location": "/references/openapi/", 
            "text": "OpenAPI based Definitions\n\n\nDefine your API using \nOpenAPI Specification\n.\n\n\nThe specification provides a standard for describing interoperable REST APIs based on Resources\nand HTTP. The result is a definition that is human and machine consumable. Standards make it\nmachine consumable and the simplicity makes it easy enough for developers to document and\nlearn the API.\n\n\nHumans use the definition as a source of API documentation, examples, and as a guide to try out\nand understand the capabilities of the API. Ease of use is the key factor for success.\n\n\nThree common use-cases for using \nOpenAPI Specification\n to define the APIs within your application.\n\n\nCredit: \nScenario Source\n\n\n\n\nLegacy API\n\n\nDesign First\n\n\nServer First\n\n\n\n\nLegacy API\n\n\nThe first scenario covers services and APIs that are already in production. Adding an OpenAPI\ndocument will formally capture the signature of the API in a standardized way. Therefore, consumers\ncan use this API definition as documentation to easily integrate with your API.\n\n\nAs long as you are using HTTP or HTTPS with JSON or XML encoding, it doesn\u2019t matter what language\nor framework you choosed for the implementation: you have an interoperable API awaiting to be\ndiscovered by the world.\n\n\nThe best thing here that surprise many people is: \nyou don\u2019t have to change a single bit of your\nrunning API or service\n. The metadata provided by the OpenAPI Spec is a definition stored in a\nself-contained file (YAML or JSON) you can share offline (as a file) or publish in any web server.\n\n\nDesign First\n\n\nParallel development by the API provider and the API consumer(s) is made possible because all teams\nshare an API definition. The API definition can be edited and validated with no language or\nimplementation assumptions, thereby making the API fully interoperable.\n\n\nOpenAPI and the related ecosystem of tools provide the ability to use the API definition to view\ndocumentation, validate the API, generate server code stubs, and generate client code.\n\n\nEach team will leverage the tools to generate server stubs, and proxies for the client in any\nsupported language or platform.\n\n\nThis is the recommended approach for long term success of producing high quality APIs. The one major\nchallenge to this approach is that the main API functionality needs to be understood enough in order\nto create the API definition first.\n\n\nIn the long term you will maintain and evolve the definition in a planned manner including a well\ndefined versioning strategy. See \nSemantic Versioning\n for to guide the versioning strategy.\n\n\nServer First\n\n\nDevelopment of the API implementation starts, typically as a method of quickly prototyping an idea,\nwhen the domain or functionality is not well understood.\n\n\nThis scenario is also supported because it is possible to generate an API definition using reflection\ntechniques and metadata to discover services, types, and parameters through source code inspection.\n\n\nShort-term Advantages:\n\n\n\n\nAuto-generated documentation and definition.\n\n\nDefinition is always in sync with API implementation.\n\n\nAgility in server-side development.\n\n\n\n\nMajor Disadvantages:\n\n\n\n\nExtreme caution and due dilgence required when adding new features could inadvertently breaking existing clients.\n\n\nDerived API definitions could lack simplicity or user experience (compared to design first). The optimizations made for automation could be confusing for humans: design for humans.\n\n\n\n\nOnly recommended for fast prototyping that is not bound for production. This alleviates the risk of\nbreaking existing clients. Once the main API functionality is well understood, refactor API definition\nfor proper user experience and continue with \nDesign First\n approach.\n\n\nOpenAPI Ecosystem\n\n\nThere is a very large ecosystems that provides tools to make producing and consumes APIs faster and easier!\n\n\nEditor\n is a powerful editor for designing or editing APIs which visually\nrenders your API definition with concise, real time feedback and error handling.\n\n\nDocumentation\n helps you visualize your API resources from its\nAPI definition and generate beautiful, interactive documentation that can be host in any environment.\n\n\nCode Generation\n will use your API definition\nto generate server stubs and/or client libraries (SDK) in more than 40 different languages.\n\n\nDesktop Client\n provides a client that can import your API definition\nto generate an instant client for using your APIs.\n\n\nPlus many more \ncommercial tools\n and \nopen source tools\n.\n\n\nMost of the ecosystem is based on the \nOpenAPI Spec v2 (formerly known as Swagger)\n.\n\nOpenAPI Spec v3\n was released \nJuly 26, 2017\n. The tooling will take time to be updated\nto supported the latest version. Many of the tool providers have already started work for adding support.", 
            "title": "OpenAPI"
        }, 
        {
            "location": "/references/openapi/#openapi-based-definitions", 
            "text": "Define your API using  OpenAPI Specification .  The specification provides a standard for describing interoperable REST APIs based on Resources\nand HTTP. The result is a definition that is human and machine consumable. Standards make it\nmachine consumable and the simplicity makes it easy enough for developers to document and\nlearn the API.  Humans use the definition as a source of API documentation, examples, and as a guide to try out\nand understand the capabilities of the API. Ease of use is the key factor for success.  Three common use-cases for using  OpenAPI Specification  to define the APIs within your application.  Credit:  Scenario Source   Legacy API  Design First  Server First", 
            "title": "OpenAPI based Definitions"
        }, 
        {
            "location": "/references/openapi/#legacy-api", 
            "text": "The first scenario covers services and APIs that are already in production. Adding an OpenAPI\ndocument will formally capture the signature of the API in a standardized way. Therefore, consumers\ncan use this API definition as documentation to easily integrate with your API.  As long as you are using HTTP or HTTPS with JSON or XML encoding, it doesn\u2019t matter what language\nor framework you choosed for the implementation: you have an interoperable API awaiting to be\ndiscovered by the world.  The best thing here that surprise many people is:  you don\u2019t have to change a single bit of your\nrunning API or service . The metadata provided by the OpenAPI Spec is a definition stored in a\nself-contained file (YAML or JSON) you can share offline (as a file) or publish in any web server.", 
            "title": "Legacy API"
        }, 
        {
            "location": "/references/openapi/#design-first", 
            "text": "Parallel development by the API provider and the API consumer(s) is made possible because all teams\nshare an API definition. The API definition can be edited and validated with no language or\nimplementation assumptions, thereby making the API fully interoperable.  OpenAPI and the related ecosystem of tools provide the ability to use the API definition to view\ndocumentation, validate the API, generate server code stubs, and generate client code.  Each team will leverage the tools to generate server stubs, and proxies for the client in any\nsupported language or platform.  This is the recommended approach for long term success of producing high quality APIs. The one major\nchallenge to this approach is that the main API functionality needs to be understood enough in order\nto create the API definition first.  In the long term you will maintain and evolve the definition in a planned manner including a well\ndefined versioning strategy. See  Semantic Versioning  for to guide the versioning strategy.", 
            "title": "Design First"
        }, 
        {
            "location": "/references/openapi/#server-first", 
            "text": "Development of the API implementation starts, typically as a method of quickly prototyping an idea,\nwhen the domain or functionality is not well understood.  This scenario is also supported because it is possible to generate an API definition using reflection\ntechniques and metadata to discover services, types, and parameters through source code inspection.  Short-term Advantages:   Auto-generated documentation and definition.  Definition is always in sync with API implementation.  Agility in server-side development.   Major Disadvantages:   Extreme caution and due dilgence required when adding new features could inadvertently breaking existing clients.  Derived API definitions could lack simplicity or user experience (compared to design first). The optimizations made for automation could be confusing for humans: design for humans.   Only recommended for fast prototyping that is not bound for production. This alleviates the risk of\nbreaking existing clients. Once the main API functionality is well understood, refactor API definition\nfor proper user experience and continue with  Design First  approach.", 
            "title": "Server First"
        }, 
        {
            "location": "/references/openapi/#openapi-ecosystem", 
            "text": "There is a very large ecosystems that provides tools to make producing and consumes APIs faster and easier!  Editor  is a powerful editor for designing or editing APIs which visually\nrenders your API definition with concise, real time feedback and error handling.  Documentation  helps you visualize your API resources from its\nAPI definition and generate beautiful, interactive documentation that can be host in any environment.  Code Generation  will use your API definition\nto generate server stubs and/or client libraries (SDK) in more than 40 different languages.  Desktop Client  provides a client that can import your API definition\nto generate an instant client for using your APIs.  Plus many more  commercial tools  and  open source tools .  Most of the ecosystem is based on the  OpenAPI Spec v2 (formerly known as Swagger) . OpenAPI Spec v3  was released  July 26, 2017 . The tooling will take time to be updated\nto supported the latest version. Many of the tool providers have already started work for adding support.", 
            "title": "OpenAPI Ecosystem"
        }, 
        {
            "location": "/references/design/", 
            "text": "Designing an API\n\n\nUsing the recommended \nDesign First\n approach, establish a clear understanding of the\nmain API functionality.\n\n\nResources are structures that represent data being passed in as part of a request or returned as\npart of a response.\n\n\nOperations are the actions that a resource supports. Start with the basic CRUD actions.\n\n\nQuestions to ask yourself\n\n\n\n\nWhat resource(s) will my API be operating on?\n\n\nWhat operation(s) will clients be able to perform on the resource(s)?\n\n\n\n\nResources Example\n\n\nTask\n    - id (uuid string): Unique identifier\n    - title (string): Title of task\n    - description (string): Detailed description of the task\n    - status (string): Status of the task\n    - severity (int32): Level of important of task\n    - effort (int32): Level of effort required to complete task\n    - reportedBy (User): The person that identified the task.\n    - assignedTo (User): The person assigned to work on the task.\n\nUser\n    - id (uuid string): Unique identifier\n    - screenName (string): Name of user\n\n\n\n\nOperations Example\n\n\n\n\nList Task(s)\n\n\nCreate Task\n\n\nView Task\n\n\nUpdate Task\n\n\n\n\nBasic Structure\n\n\nThree major parts of the \nOpenAPI Specification\n that\nprovide the overall definition of an API.\n\n\ninfo\n\n\nThe \ninfo\n part of the specification represents the API Metadata.\n\n\nExample\n\n\nswagger: 2.0\ninfo:\n    title: Issue Tracker\n    description: |\n        This application implements a very simple issue tracker.\n    version: 1.0.0\n\nschemes:\n  - http\n\nproduces:\n  - application/json\nconsumes:\n  - application/json\n\n# API versioning (Major Version)\nbasePath: /v1\n\n\n\n\ndefinitions\n\n\nThe \ndefinitions\n part of the specification represents the API Resource(s).\n\n\nExample\n\n\ndefinitions:\n    Task:\n        title: Task\n        description: \n\n          Task is the main entity in this application. Everything revolves around\n          tasks and managing them.\n        type: object\n        properties:\n          id:\n            title: The id of the task.\n            description: \n-\n              A unique identifier for the task. These are created in ascending order.\n            type: string\n            format: uuid\n          title:\n            title: The title of the task.\n            description: |\n              The title for a task.\n            type: string\n          description:\n            title: The description of the task.\n            description: \n\n              The task description is a longer, more detailed description of the issue.\n            type: string\n          severity:\n            type: integer\n            format: int32\n          effort:\n            description: the level of effort required to get this task completed\n            type: integer\n            format: int32\n          status:\n            title: the status of the issue\n            description: |\n              the status of the issue\n            type: string\n          assignedTo:\n            $ref: '#/definitions/User'\n          reportedBy:\n            $ref: '#/definitions/User'\n\n    User:\n        title: User\n        description: \n\n          This representation of a user is mainly meant for inclusion in other\n          models, or for list views.\n        type: object\n        properties:\n          id:\n            title: A unique identifier for a user.\n            description: \n\n              This id is automatically generated on the server when a user is created.\n            type: string\n            format: uuid\n          screenName:\n            title: The screen name for the user.\n            description: |\n              This is used for vanity type urls as well as login credentials.\n            type: string\n\n\n\n\npaths\n\n\nThe \npaths\n part of the specification represents the API Operation(s).\n\n\nExample\n\n\npaths:\n    /tasks:\n        get:\n          operationId: listTasks\n          summary: Lists the tasks\n          description: |\n            List tasks.\n          responses:\n            200:\n              description: Successful response\n              schema:\n                title: TaskList\n                type: array\n                items:\n                  $ref: '#/definitions/Task'\n        post:\n          operationId: createTask\n          summary: Creates a 'Task' object.\n          description: |\n            Allows for creating a task.\n          parameters:\n            - name: body\n              in: body\n              description: The task to create\n              required: true\n              schema:\n                $ref: '#/definitions/Task'\n          responses:\n            201:\n              description: Task created\n\n    /tasks/{id}:\n        get:\n          operationId: viewTask\n          summary: Gets the details for a task.\n          description: |\n            The details view of a task.\n          parameters:\n            - in: path\n              name: id\n              description: The id of the task\n              type: string\n              format: uuid\n              required: true\n          responses:\n            200:\n              description: Task details\n              schema:\n                $ref: '#/definitions/Task'\n        put:\n          operationId: updateTask\n          summary: Updates the details for a task.\n          description: |\n            Allows for updating a task.\n          parameters:\n            - name: body\n              in: body\n              description: The task to update\n              required: true\n              schema:\n                $ref: '#/definitions/Task'\n          responses:\n            200:\n              description: Task details\n              schema:\n                $ref: '#/definitions/Task'", 
            "title": "API Design"
        }, 
        {
            "location": "/references/design/#designing-an-api", 
            "text": "Using the recommended  Design First  approach, establish a clear understanding of the\nmain API functionality.  Resources are structures that represent data being passed in as part of a request or returned as\npart of a response.  Operations are the actions that a resource supports. Start with the basic CRUD actions.  Questions to ask yourself   What resource(s) will my API be operating on?  What operation(s) will clients be able to perform on the resource(s)?   Resources Example  Task\n    - id (uuid string): Unique identifier\n    - title (string): Title of task\n    - description (string): Detailed description of the task\n    - status (string): Status of the task\n    - severity (int32): Level of important of task\n    - effort (int32): Level of effort required to complete task\n    - reportedBy (User): The person that identified the task.\n    - assignedTo (User): The person assigned to work on the task.\n\nUser\n    - id (uuid string): Unique identifier\n    - screenName (string): Name of user  Operations Example   List Task(s)  Create Task  View Task  Update Task", 
            "title": "Designing an API"
        }, 
        {
            "location": "/references/design/#basic-structure", 
            "text": "Three major parts of the  OpenAPI Specification  that\nprovide the overall definition of an API.", 
            "title": "Basic Structure"
        }, 
        {
            "location": "/references/design/#info", 
            "text": "The  info  part of the specification represents the API Metadata.  Example  swagger: 2.0\ninfo:\n    title: Issue Tracker\n    description: |\n        This application implements a very simple issue tracker.\n    version: 1.0.0\n\nschemes:\n  - http\n\nproduces:\n  - application/json\nconsumes:\n  - application/json\n\n# API versioning (Major Version)\nbasePath: /v1", 
            "title": "info"
        }, 
        {
            "location": "/references/design/#definitions", 
            "text": "The  definitions  part of the specification represents the API Resource(s).  Example  definitions:\n    Task:\n        title: Task\n        description:  \n          Task is the main entity in this application. Everything revolves around\n          tasks and managing them.\n        type: object\n        properties:\n          id:\n            title: The id of the task.\n            description:  -\n              A unique identifier for the task. These are created in ascending order.\n            type: string\n            format: uuid\n          title:\n            title: The title of the task.\n            description: |\n              The title for a task.\n            type: string\n          description:\n            title: The description of the task.\n            description:  \n              The task description is a longer, more detailed description of the issue.\n            type: string\n          severity:\n            type: integer\n            format: int32\n          effort:\n            description: the level of effort required to get this task completed\n            type: integer\n            format: int32\n          status:\n            title: the status of the issue\n            description: |\n              the status of the issue\n            type: string\n          assignedTo:\n            $ref: '#/definitions/User'\n          reportedBy:\n            $ref: '#/definitions/User'\n\n    User:\n        title: User\n        description:  \n          This representation of a user is mainly meant for inclusion in other\n          models, or for list views.\n        type: object\n        properties:\n          id:\n            title: A unique identifier for a user.\n            description:  \n              This id is automatically generated on the server when a user is created.\n            type: string\n            format: uuid\n          screenName:\n            title: The screen name for the user.\n            description: |\n              This is used for vanity type urls as well as login credentials.\n            type: string", 
            "title": "definitions"
        }, 
        {
            "location": "/references/design/#paths", 
            "text": "The  paths  part of the specification represents the API Operation(s).  Example  paths:\n    /tasks:\n        get:\n          operationId: listTasks\n          summary: Lists the tasks\n          description: |\n            List tasks.\n          responses:\n            200:\n              description: Successful response\n              schema:\n                title: TaskList\n                type: array\n                items:\n                  $ref: '#/definitions/Task'\n        post:\n          operationId: createTask\n          summary: Creates a 'Task' object.\n          description: |\n            Allows for creating a task.\n          parameters:\n            - name: body\n              in: body\n              description: The task to create\n              required: true\n              schema:\n                $ref: '#/definitions/Task'\n          responses:\n            201:\n              description: Task created\n\n    /tasks/{id}:\n        get:\n          operationId: viewTask\n          summary: Gets the details for a task.\n          description: |\n            The details view of a task.\n          parameters:\n            - in: path\n              name: id\n              description: The id of the task\n              type: string\n              format: uuid\n              required: true\n          responses:\n            200:\n              description: Task details\n              schema:\n                $ref: '#/definitions/Task'\n        put:\n          operationId: updateTask\n          summary: Updates the details for a task.\n          description: |\n            Allows for updating a task.\n          parameters:\n            - name: body\n              in: body\n              description: The task to update\n              required: true\n              schema:\n                $ref: '#/definitions/Task'\n          responses:\n            200:\n              description: Task details\n              schema:\n                $ref: '#/definitions/Task'", 
            "title": "paths"
        }, 
        {
            "location": "/references/development/", 
            "text": "Start Development\n\n\nNow that you have your API definition using the OpenAPI Specification, you are ready to get started\nwith development.\n\n\nServer / API Implementation\n\n\nGenerate a server stub and start implementing business logic, as the boilerplate plumbing\nis already done.\n\n\nUI / Clients\n\n\nIf you have a UI or other teams planning to leverage your API then you can generate a fully\nfunctional client for the programming language they need. This allows other teams to start\nworking while you build you the implementation.\n\n\nDocumentation\n\n\nPublish the API documentation using Swagger UI or generating HTML, Markdown, Asciidoc, etc. to\nallow others to preview what is coming as well as provide feedback.\n\n\nThe best part is that as you make changes to your API definition, you can regenerate the Server, Clients, and Documentation.", 
            "title": "API Development"
        }, 
        {
            "location": "/references/development/#start-development", 
            "text": "Now that you have your API definition using the OpenAPI Specification, you are ready to get started\nwith development.", 
            "title": "Start Development"
        }, 
        {
            "location": "/references/development/#server-api-implementation", 
            "text": "Generate a server stub and start implementing business logic, as the boilerplate plumbing\nis already done.", 
            "title": "Server / API Implementation"
        }, 
        {
            "location": "/references/development/#ui-clients", 
            "text": "If you have a UI or other teams planning to leverage your API then you can generate a fully\nfunctional client for the programming language they need. This allows other teams to start\nworking while you build you the implementation.", 
            "title": "UI / Clients"
        }, 
        {
            "location": "/references/development/#documentation", 
            "text": "Publish the API documentation using Swagger UI or generating HTML, Markdown, Asciidoc, etc. to\nallow others to preview what is coming as well as provide feedback.  The best part is that as you make changes to your API definition, you can regenerate the Server, Clients, and Documentation.", 
            "title": "Documentation"
        }, 
        {
            "location": "/best-practices/design/", 
            "text": "API Design Standards \n Best Practices\n\n\nCredit:\n\n\n\n\nA RESTful Tutorial\n\n\n10 Best Practices for Better RESTful API\n\n\nBest Practices for Designing a Pragmatic RESTful API\n\n\nBest Practice: API Versioning for HTTP REST Interfaces\n\n\n\n\nResources\n\n\nProducing a great API is 80% art and 20% science. Creating a URL hierarchy representing sensible\nresources is the art part. Having sensible resource names (which are just URL paths, such as\n/customers/12345/orders) improves the clarity of what a given request does.\n\n\n\n\nResource names should be \nnouns\n; avoid \nverbs\n as resource names.\n\n\nUse \nplurals\n in URL segments to keep your API URIs consistent across all HTTP methods, using the collection metaphor.\n\n\nAvoid using collection verbiage in URLs. For example 'customer_list' as a resource. Use pluralization to indicate the collection metaphor (e.g. customers vs. customer_list).\n\n\nUse lower-case in URL segments, separating words with underscores \n_\n or hyphens \n-\n. Some servers ignore case so it's best to be clear.\n\n\nUse identifiers in your URLs instead of in the query-string. Using URL query-string parameters is fantastic for filtering, but not for resource names.\n\n\nDesign for your clients, not for your data.\n\n\nLeverage the hierarchical nature of the URL to imply structure (relationships). e.g. /customers/1107/orders\n\n\nKeep URLs as short as possible, with as few segments as makes sense. \nRecommend\n: Max of 3 levels deep\n\n\n\n\nStatus Codes\n\n\nResponse status codes are part of the HTTP specification. There are quite a number of them to\naddress the most common situations. In the spirit of having our RESTful services embrace the HTTP\nspecification, our Web APIs should return relevant HTTP status codes.\n\n\nMost common HTTP Response Status Codes\n\n\n\n\n\n\n\n\nStatus Code\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n200 OK\n\n\nGeneral success status code. This is the most common code. Used to indicate success.\n\n\n\n\n\n\n201 CREATED\n\n\nSuccessful creation occurred. Set the Location header to contain a link to the newly-created resource. Response body content may or may not be present.\n\n\n\n\n\n\n204 NO CONTENT\n\n\nIndicates success but nothing is in the response body, often used for DELETE and PUT operations.\n\n\n\n\n\n\n400 BAD REQUEST\n\n\nGeneral error for when fulfilling the request would cause an invalid state. Domain validation errors, missing data, etc. are some examples.\n\n\n\n\n\n\n401 UNAUTHORIZED\n\n\nError code response for missing or invalid authentication token.\n\n\n\n\n\n\n403 FORBIDDEN\n\n\nError code for when the user is not authorized to perform the operation or the resource is unavailable for some reason (e.g. time constraints, etc.).\n\n\n\n\n\n\n404 NOT FOUND\n\n\nUsed when the requested resource is not found, whether it doesn't exist or if there was a 401 or 403 that, for security reasons, the service wants to mask.\n\n\n\n\n\n\n405 METHOD NOT ALLOWED\n\n\nUsed to indicate that the requested URL exists, but the requested HTTP method is not applicable. The Allow HTTP header must be set when returning a 405 to indicate the HTTP methods that are supported.\n\n\n\n\n\n\n409 CONFLICT\n\n\nWhenever a resource conflict would be caused by fulfilling the request.\n\n\n\n\n\n\n500 INTERNAL SERVER ERROR\n\n\nNever return this intentionally. The general catch-all error when the server-side throws an exception. Use this only for errors that the consumer cannot address from their end.\n\n\n\n\n\n\n\n\nMethods\n\n\nMethods on resources should be defined using standard HTTP verbs\n\n\n\n\n\n\n\n\nHTTP Verb\n\n\nCRUD\n\n\nEntire Collection (e.g. /customers)\n\n\nSpecific Item (e.g. /customes/{id})\n\n\n\n\n\n\n\n\n\n\nPOST\n\n\nCreate\n\n\n201 (Created), 'Location' header with link to /customers/{id} containing new ID.\n\n\n404 (Not Found), 409 (Conflict) if resource already exists.\n\n\n\n\n\n\nGET\n\n\nREAD\n\n\n200 (OK), list of customers. Use pagination, sorting, and filtering to navigate big lists.\n\n\n200 (OK), single customer, 404 (Not Found), if ID not found or invalid.\n\n\n\n\n\n\nPUT\n\n\nUpdate/Replace\n\n\n405 (Method Not Allowed)\n\n\n200 (OK) or 204 (No Content), 404 (Not Found), if ID not found or invalid.\n\n\n\n\n\n\nPATCH\n\n\nUpdate/Modify\n\n\n405 (Method Not Allowed)\n\n\n200 (OK) or 204 (No Content), 404 (Not Found), if ID not found or invalid.\n\n\n\n\n\n\nDELETE\n\n\nDelete\n\n\n405 (Method Not Allowed)\n\n\n200 (OK), 404 (Not Found), if ID not found or invalid.\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nGET requests must not change any underlying resource data.\n\n\n\n\nErrors\n\n\nAll errors should return a payload with details about the error.\n\n\nMinimal attributes of the error payload\n\n\n\n\nmessage: Useful message about the cause of the error\n\n\ncode: An identifier that can be used to get additional information.\n\n\n\n\nFormats\n\n\nAll APIs should support JSON formats by default. Optionally support other formats, e.g. XML.\n\n\nUse HTTP Header to specify serialzation formats.\n\n\n*Content-Type* defines the request format.\n*Accept* defines a list of acceptable response formats.\n\n\n\nFiltering, Sorting, Field Selection \n Pagination\n\n\nWhen performing GET on a collection clients will need the ability to filter, sort, paginate, and/or limit fields in the results.\n\n\nFiltering\n\n\nUse a unique query parameter for all fields or a query language for filtering.\n\n\nGET /cars?color=red\nGET /cars?seats\n=2\n\n\n\n\nSorting\n\n\nAllow ascending and descending sorting over multiple fields.\n\n\nGET /cars?sort=-manufactorer,+model\n\n\n\n\nField Selection\n\n\nMobile clients display just a few attributes in a list. They don\u2019t need all attributes of a resource.\nGive the API consumer the ability to choose returned fields. This will also reduce the network traffic\nand speed up the usage of the API.\n\n\nGET /cars?fields=manufacturer,model,id,color\n\n\n\n\nPaging\n\n\nUse limit and offset. It is flexible for the user and common in leading databases.\n\n\nGET /cars?offset=10\nlimit=5\n\n\n\n\nUse the HTTP Header \nLink\n to return a set of ready-made links.\n\n\nLink: \nhttps://api.github.com/user/repos?page=3\nper_page=100\n; rel=\nnext\n, \nhttps://api.github.com/user/repos?page=50\nper_page=100\n; rel=\nlast\n\n\n\n\n\nAn API that requires sending a count can use a custom HTTP header like \nX-Total-Count\n.\n\n\nVersioning\n\n\nAlways version your API. Use \nSemantic Versioning\n for defining versions.\n\n\nThe major version should be included in the URL.\n\n\n/blog/api/v1\n\n\n\n\nUse HTTP content type negotiation to expose minor verions. Leverage the versioned vnd content types.\n\n\nThere is an \nHTTP RFC 6838\n for custom vendor-specific MIME types.\nIt reserves a whole \u201cvendor tree\u201d, with free-form entries looking like type/vnd.producer\u2019s name followed\nby media type name [+suffix]\n\n\napplication/vnd.crowbar.v2.3+json\n\n\n\n\nIn this case, the major version provides structural stability of the API as a whole while the\nminor versions accounts for smaller changes (field deprecations, endpoint changes, etc).\n\n\nSecurity\n\n\nAlways use SSL. No exceptions.\n\n\nUse \nOAuth2\n for authentication. The defacto industry standard for APIs.\n\n\nCaching\n\n\nHTTP provides a built-in caching framework! All you have to do is include some additional outbound\nresponse headers and do a little validation when you receive some inbound request headers.\n\n\nThere are 2 approaches: \nETag\n and \nLast-Modified\n\n\nETag\n: When generating a response, include a HTTP header \nETag\n containing a hash or checksum of the\nrepresentation. This value should change whenever the output representation changes. Now, if an\ninbound HTTP requests contains a \nIf-None-Match\n header with a matching ETag value, the API should\nreturn a \n304 Not Modified\n status code instead of the output representation of the resource.\n\n\nLast-Modified\n: This basically works like to ETag, except that it uses timestamps. The response\nheader \nLast-Modified\n contains a timestamp in \nRFC 1123\n format\nwhich is validated against \nIf-Modified-Since\n. Note that the HTTP spec has had 3 different\nacceptable date formats and the server should be prepared to accept any one of them.", 
            "title": "API Design"
        }, 
        {
            "location": "/best-practices/design/#api-design-standards-best-practices", 
            "text": "Credit:   A RESTful Tutorial  10 Best Practices for Better RESTful API  Best Practices for Designing a Pragmatic RESTful API  Best Practice: API Versioning for HTTP REST Interfaces", 
            "title": "API Design Standards &amp; Best Practices"
        }, 
        {
            "location": "/best-practices/design/#resources", 
            "text": "Producing a great API is 80% art and 20% science. Creating a URL hierarchy representing sensible\nresources is the art part. Having sensible resource names (which are just URL paths, such as\n/customers/12345/orders) improves the clarity of what a given request does.   Resource names should be  nouns ; avoid  verbs  as resource names.  Use  plurals  in URL segments to keep your API URIs consistent across all HTTP methods, using the collection metaphor.  Avoid using collection verbiage in URLs. For example 'customer_list' as a resource. Use pluralization to indicate the collection metaphor (e.g. customers vs. customer_list).  Use lower-case in URL segments, separating words with underscores  _  or hyphens  - . Some servers ignore case so it's best to be clear.  Use identifiers in your URLs instead of in the query-string. Using URL query-string parameters is fantastic for filtering, but not for resource names.  Design for your clients, not for your data.  Leverage the hierarchical nature of the URL to imply structure (relationships). e.g. /customers/1107/orders  Keep URLs as short as possible, with as few segments as makes sense.  Recommend : Max of 3 levels deep", 
            "title": "Resources"
        }, 
        {
            "location": "/best-practices/design/#status-codes", 
            "text": "Response status codes are part of the HTTP specification. There are quite a number of them to\naddress the most common situations. In the spirit of having our RESTful services embrace the HTTP\nspecification, our Web APIs should return relevant HTTP status codes.  Most common HTTP Response Status Codes     Status Code  Description      200 OK  General success status code. This is the most common code. Used to indicate success.    201 CREATED  Successful creation occurred. Set the Location header to contain a link to the newly-created resource. Response body content may or may not be present.    204 NO CONTENT  Indicates success but nothing is in the response body, often used for DELETE and PUT operations.    400 BAD REQUEST  General error for when fulfilling the request would cause an invalid state. Domain validation errors, missing data, etc. are some examples.    401 UNAUTHORIZED  Error code response for missing or invalid authentication token.    403 FORBIDDEN  Error code for when the user is not authorized to perform the operation or the resource is unavailable for some reason (e.g. time constraints, etc.).    404 NOT FOUND  Used when the requested resource is not found, whether it doesn't exist or if there was a 401 or 403 that, for security reasons, the service wants to mask.    405 METHOD NOT ALLOWED  Used to indicate that the requested URL exists, but the requested HTTP method is not applicable. The Allow HTTP header must be set when returning a 405 to indicate the HTTP methods that are supported.    409 CONFLICT  Whenever a resource conflict would be caused by fulfilling the request.    500 INTERNAL SERVER ERROR  Never return this intentionally. The general catch-all error when the server-side throws an exception. Use this only for errors that the consumer cannot address from their end.", 
            "title": "Status Codes"
        }, 
        {
            "location": "/best-practices/design/#methods", 
            "text": "Methods on resources should be defined using standard HTTP verbs     HTTP Verb  CRUD  Entire Collection (e.g. /customers)  Specific Item (e.g. /customes/{id})      POST  Create  201 (Created), 'Location' header with link to /customers/{id} containing new ID.  404 (Not Found), 409 (Conflict) if resource already exists.    GET  READ  200 (OK), list of customers. Use pagination, sorting, and filtering to navigate big lists.  200 (OK), single customer, 404 (Not Found), if ID not found or invalid.    PUT  Update/Replace  405 (Method Not Allowed)  200 (OK) or 204 (No Content), 404 (Not Found), if ID not found or invalid.    PATCH  Update/Modify  405 (Method Not Allowed)  200 (OK) or 204 (No Content), 404 (Not Found), if ID not found or invalid.    DELETE  Delete  405 (Method Not Allowed)  200 (OK), 404 (Not Found), if ID not found or invalid.      Note  GET requests must not change any underlying resource data.", 
            "title": "Methods"
        }, 
        {
            "location": "/best-practices/design/#errors", 
            "text": "All errors should return a payload with details about the error.  Minimal attributes of the error payload   message: Useful message about the cause of the error  code: An identifier that can be used to get additional information.", 
            "title": "Errors"
        }, 
        {
            "location": "/best-practices/design/#formats", 
            "text": "All APIs should support JSON formats by default. Optionally support other formats, e.g. XML.  Use HTTP Header to specify serialzation formats.  *Content-Type* defines the request format.\n*Accept* defines a list of acceptable response formats.", 
            "title": "Formats"
        }, 
        {
            "location": "/best-practices/design/#filtering-sorting-field-selection-pagination", 
            "text": "When performing GET on a collection clients will need the ability to filter, sort, paginate, and/or limit fields in the results.  Filtering  Use a unique query parameter for all fields or a query language for filtering.  GET /cars?color=red\nGET /cars?seats =2  Sorting  Allow ascending and descending sorting over multiple fields.  GET /cars?sort=-manufactorer,+model  Field Selection  Mobile clients display just a few attributes in a list. They don\u2019t need all attributes of a resource.\nGive the API consumer the ability to choose returned fields. This will also reduce the network traffic\nand speed up the usage of the API.  GET /cars?fields=manufacturer,model,id,color  Paging  Use limit and offset. It is flexible for the user and common in leading databases.  GET /cars?offset=10 limit=5  Use the HTTP Header  Link  to return a set of ready-made links.  Link:  https://api.github.com/user/repos?page=3 per_page=100 ; rel= next ,  https://api.github.com/user/repos?page=50 per_page=100 ; rel= last   An API that requires sending a count can use a custom HTTP header like  X-Total-Count .", 
            "title": "Filtering, Sorting, Field Selection &amp; Pagination"
        }, 
        {
            "location": "/best-practices/design/#versioning", 
            "text": "Always version your API. Use  Semantic Versioning  for defining versions.  The major version should be included in the URL.  /blog/api/v1  Use HTTP content type negotiation to expose minor verions. Leverage the versioned vnd content types.  There is an  HTTP RFC 6838  for custom vendor-specific MIME types.\nIt reserves a whole \u201cvendor tree\u201d, with free-form entries looking like type/vnd.producer\u2019s name followed\nby media type name [+suffix]  application/vnd.crowbar.v2.3+json  In this case, the major version provides structural stability of the API as a whole while the\nminor versions accounts for smaller changes (field deprecations, endpoint changes, etc).", 
            "title": "Versioning"
        }, 
        {
            "location": "/best-practices/design/#security", 
            "text": "Always use SSL. No exceptions.  Use  OAuth2  for authentication. The defacto industry standard for APIs.", 
            "title": "Security"
        }, 
        {
            "location": "/best-practices/design/#caching", 
            "text": "HTTP provides a built-in caching framework! All you have to do is include some additional outbound\nresponse headers and do a little validation when you receive some inbound request headers.  There are 2 approaches:  ETag  and  Last-Modified  ETag : When generating a response, include a HTTP header  ETag  containing a hash or checksum of the\nrepresentation. This value should change whenever the output representation changes. Now, if an\ninbound HTTP requests contains a  If-None-Match  header with a matching ETag value, the API should\nreturn a  304 Not Modified  status code instead of the output representation of the resource.  Last-Modified : This basically works like to ETag, except that it uses timestamps. The response\nheader  Last-Modified  contains a timestamp in  RFC 1123  format\nwhich is validated against  If-Modified-Since . Note that the HTTP spec has had 3 different\nacceptable date formats and the server should be prepared to accept any one of them.", 
            "title": "Caching"
        }, 
        {
            "location": "/best-practices/implementation/", 
            "text": "Implementation Best Practices\n\n\nInstrumentation\n\n\nInstrument your server code, with the most important aspects being the capture of every request\nand corresponding response. If you make calls to other services using their API then capture the\nrequest and response those calls.\n\n\nAs part of this instrumentation, at the start of each request generate a unique id to associate\nwith each log message related to that request. It is strongly recommended to include the same\nunique id as part of the response back to the caller. If there is an error or other issue, then\nthe user can provide that id which can be used to find the logs associated with their specific\nrequest for easier problem resolution.\n\n\nThe logs should be published to a central logging service like ELK or Splunk.\n\n\nCapture Metrics\n\n\nCapture metrics about request processing to help identify bottle necks, hot zones, and impacts\nbased on recent changes. First establish the types of metrics relevant for your application.\nMost common is total time processing time for a request, request successful or failed and total\nprocessing time for requests made to external services.\n\n\nThere are multiple different ways to capture the metrics. Publish using client (prometheus),\nextract from logging service (elk) or use service like AppDynamics to name a few.\n\n\nHealth Checks\n\n\nProvide an API endpoint for health check (/health). The response should be a status 200 if healthy.\nFor degraded or unhealthy select the most appropriate based on your selected monitors (4xx or 5xx).\nThe implementation of your health check will vary based on what is relevant for you application.\nIt can be as simple as returning status 200 to indicate the server process is up and able to respond.\nIf you have dependency on external resources then checking if they are all fully operational\nis recommended.\n\n\nMonitoring and Alerting\n\n\nYou should having monitoring and alerting of your logs (on error or N errors within X period of time, etc.),\non your metrics (response times greater than threshold), and on your health (on degraded or unhealthy\nor no response within X period of time).\n\n\nThe notifications can be done in multiple different approaches, for example emails, text messages,\ndashboard alerts, published events, and message on collaboration platform.\n\n\nSynthetic Transactions\n\n\nAutomated execution of 1 or more APIs that exercise the functionality of the APIs within the\nproduction system at a set interval. Ideal for GET and for resources that have full CRUD support\n(POST/GET/PUT/PATCH/DELETE).\n\n\nThese transactions serve the purpose to validate your APIs are functional. Continue to generate\nmetrics for your APIs on a reoccurring interval even if users / clients are not currently using a\nspecific API. Also the continued use of the APIs allows you to proactively identify outages,\nperformance degradation, and other possible issues as the Monitoring and Alerting will send\nnotifications when issues arise.", 
            "title": "API Implementation"
        }, 
        {
            "location": "/best-practices/implementation/#implementation-best-practices", 
            "text": "", 
            "title": "Implementation Best Practices"
        }, 
        {
            "location": "/best-practices/implementation/#instrumentation", 
            "text": "Instrument your server code, with the most important aspects being the capture of every request\nand corresponding response. If you make calls to other services using their API then capture the\nrequest and response those calls.  As part of this instrumentation, at the start of each request generate a unique id to associate\nwith each log message related to that request. It is strongly recommended to include the same\nunique id as part of the response back to the caller. If there is an error or other issue, then\nthe user can provide that id which can be used to find the logs associated with their specific\nrequest for easier problem resolution.  The logs should be published to a central logging service like ELK or Splunk.", 
            "title": "Instrumentation"
        }, 
        {
            "location": "/best-practices/implementation/#capture-metrics", 
            "text": "Capture metrics about request processing to help identify bottle necks, hot zones, and impacts\nbased on recent changes. First establish the types of metrics relevant for your application.\nMost common is total time processing time for a request, request successful or failed and total\nprocessing time for requests made to external services.  There are multiple different ways to capture the metrics. Publish using client (prometheus),\nextract from logging service (elk) or use service like AppDynamics to name a few.", 
            "title": "Capture Metrics"
        }, 
        {
            "location": "/best-practices/implementation/#health-checks", 
            "text": "Provide an API endpoint for health check (/health). The response should be a status 200 if healthy.\nFor degraded or unhealthy select the most appropriate based on your selected monitors (4xx or 5xx).\nThe implementation of your health check will vary based on what is relevant for you application.\nIt can be as simple as returning status 200 to indicate the server process is up and able to respond.\nIf you have dependency on external resources then checking if they are all fully operational\nis recommended.", 
            "title": "Health Checks"
        }, 
        {
            "location": "/best-practices/implementation/#monitoring-and-alerting", 
            "text": "You should having monitoring and alerting of your logs (on error or N errors within X period of time, etc.),\non your metrics (response times greater than threshold), and on your health (on degraded or unhealthy\nor no response within X period of time).  The notifications can be done in multiple different approaches, for example emails, text messages,\ndashboard alerts, published events, and message on collaboration platform.", 
            "title": "Monitoring and Alerting"
        }, 
        {
            "location": "/best-practices/implementation/#synthetic-transactions", 
            "text": "Automated execution of 1 or more APIs that exercise the functionality of the APIs within the\nproduction system at a set interval. Ideal for GET and for resources that have full CRUD support\n(POST/GET/PUT/PATCH/DELETE).  These transactions serve the purpose to validate your APIs are functional. Continue to generate\nmetrics for your APIs on a reoccurring interval even if users / clients are not currently using a\nspecific API. Also the continued use of the APIs allows you to proactively identify outages,\nperformance degradation, and other possible issues as the Monitoring and Alerting will send\nnotifications when issues arise.", 
            "title": "Synthetic Transactions"
        }, 
        {
            "location": "/tutorials/setup/", 
            "text": "Environment Setup\n\n\nSummary\n\n\nThis tutorial will explain how to setup your local environment to be able to generate API Server\nstubs, API clients, and API documentation.\n\n\n\n\nInfo\n\n\nPrerequisite \nDocker Installation\n\n\n\n\nInstall codegen-cli\n\n\nTo install the codegen-cli perform a docker pull.\n\n\ndocker pull swaggerapi/swagger-codegen-cli\n\n\n\n\nIf you plan to generate a Server or Client in Golang, you will want to download \ngo-swagger\n as well.\n\n\ndocker pull quay.io/goswagger/swagger\n\n\n\n\nInstall Documentation Tool(s)\n\n\nConverting API definition to:\n\n\n\n\nAsciiDoc\n\n\nGitHub Flavored Markdown\n\n\nAtlassian Confluence Wiki\n\n\n\n\ndocker pull swagger2markup/swagger2markup\n\n\n\n\nAdditional conversion from AsciiDoc to:\n\n\n\n\nHTML5\n\n\nPDF\n\n\nEPUB\n\n\n\n\ndocker pull asciidoctor/docker-asciidoctor\n\n\n\n\nCopy Example API Definition\n\n\nFilename: \ntask-tracker-api.yaml\n\n\n# Original source\n# https://raw.githubusercontent.com/go-swagger/go-swagger/master/examples/task-tracker/swagger.yml\nswagger: \n2.0\n\ninfo:\n    title: Issue Tracker\n    description: |\n        This application implements a very simple issue tracker.\n    version: \n1.0.0\n\n\nschemes:\n  - http\n\nproduces:\n  - application/json\nconsumes:\n  - application/json\n\n# API versioning (Major Version)\nbasePath: /v1\n\ndefinitions:\n    Task:\n        title: Task\n        description: \n\n          Task is the main entity in this application. Everything revolves around\n          tasks and managing them.\n        type: object\n        properties:\n          id:\n            title: The id of the task.\n            description: \n-\n              A unique identifier for the task. These are created in ascending order.\n            type: string\n            format: uuid\n          title:\n            title: The title of the task.\n            description: |\n              The title for a task.\n            type: string\n          description:\n            title: The description of the task.\n            description: \n\n              The task description is a longer, more detailed description of the issue.\n            type: string\n          severity:\n            type: integer\n            format: int32\n          effort:\n            description: the level of effort required to get this task completed\n            type: integer\n            format: int32\n          status:\n            title: the status of the issue\n            description: |\n              the status of the issue\n            type: string\n          assignedTo:\n            $ref: '#/definitions/User'\n          reportedBy:\n            $ref: '#/definitions/User'\n\n    User:\n        title: User\n        description: \n\n          This representation of a user is mainly meant for inclusion in other\n          models, or for list views.\n        type: object\n        properties:\n          id:\n            title: A unique identifier for a user.\n            description: \n\n              This id is automatically generated on the server when a user is created.\n            type: string\n            format: uuid\n          screenName:\n            title: The screen name for the user.\n            description: |\n              This is used for vanity type urls as well as login credentials.\n            type: string\n\npaths:\n    /tasks:\n        get:\n          operationId: listTasks\n          summary: Lists the tasks\n          description: |\n            List tasks.\n          responses:\n            200:\n              description: Successful response\n              schema:\n                title: TaskList\n                type: array\n                items:\n                  $ref: '#/definitions/Task'\n        post:\n          operationId: createTask\n          summary: Creates a 'Task' object.\n          description: |\n            Allows for creating a task.\n          parameters:\n            - name: body\n              in: body\n              description: The task to create\n              required: true\n              schema:\n                $ref: '#/definitions/Task'\n          responses:\n            201:\n              description: Task created\n\n    /tasks/{id}:\n        parameters:\n          - name: id\n            description: The id of the task\n            in: path\n            required: true\n            type: string\n            format: uuid\n        get:\n          operationId: viewTask\n          summary: Gets the details for a task.\n          description: |\n            The details view of a task.\n          responses:\n            200:\n              description: Task details\n              schema:\n                $ref: '#/definitions/Task'\n        put:\n          operationId: updateTask\n          summary: Updates the details for a task.\n          description: |\n            Allows for updating a task.\n          parameters:\n            - name: body\n              in: body\n              description: The task to update\n              required: true\n              schema:\n                $ref: '#/definitions/Task'\n          responses:\n            200:\n              description: Task details\n              schema:\n                $ref: '#/definitions/Task'", 
            "title": "Setup"
        }, 
        {
            "location": "/tutorials/setup/#environment-setup", 
            "text": "", 
            "title": "Environment Setup"
        }, 
        {
            "location": "/tutorials/setup/#summary", 
            "text": "This tutorial will explain how to setup your local environment to be able to generate API Server\nstubs, API clients, and API documentation.   Info  Prerequisite  Docker Installation", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/setup/#install-codegen-cli", 
            "text": "To install the codegen-cli perform a docker pull.  docker pull swaggerapi/swagger-codegen-cli  If you plan to generate a Server or Client in Golang, you will want to download  go-swagger  as well.  docker pull quay.io/goswagger/swagger", 
            "title": "Install codegen-cli"
        }, 
        {
            "location": "/tutorials/setup/#install-documentation-tools", 
            "text": "Converting API definition to:   AsciiDoc  GitHub Flavored Markdown  Atlassian Confluence Wiki   docker pull swagger2markup/swagger2markup  Additional conversion from AsciiDoc to:   HTML5  PDF  EPUB   docker pull asciidoctor/docker-asciidoctor", 
            "title": "Install Documentation Tool(s)"
        }, 
        {
            "location": "/tutorials/setup/#copy-example-api-definition", 
            "text": "Filename:  task-tracker-api.yaml  # Original source\n# https://raw.githubusercontent.com/go-swagger/go-swagger/master/examples/task-tracker/swagger.yml\nswagger:  2.0 \ninfo:\n    title: Issue Tracker\n    description: |\n        This application implements a very simple issue tracker.\n    version:  1.0.0 \n\nschemes:\n  - http\n\nproduces:\n  - application/json\nconsumes:\n  - application/json\n\n# API versioning (Major Version)\nbasePath: /v1\n\ndefinitions:\n    Task:\n        title: Task\n        description:  \n          Task is the main entity in this application. Everything revolves around\n          tasks and managing them.\n        type: object\n        properties:\n          id:\n            title: The id of the task.\n            description:  -\n              A unique identifier for the task. These are created in ascending order.\n            type: string\n            format: uuid\n          title:\n            title: The title of the task.\n            description: |\n              The title for a task.\n            type: string\n          description:\n            title: The description of the task.\n            description:  \n              The task description is a longer, more detailed description of the issue.\n            type: string\n          severity:\n            type: integer\n            format: int32\n          effort:\n            description: the level of effort required to get this task completed\n            type: integer\n            format: int32\n          status:\n            title: the status of the issue\n            description: |\n              the status of the issue\n            type: string\n          assignedTo:\n            $ref: '#/definitions/User'\n          reportedBy:\n            $ref: '#/definitions/User'\n\n    User:\n        title: User\n        description:  \n          This representation of a user is mainly meant for inclusion in other\n          models, or for list views.\n        type: object\n        properties:\n          id:\n            title: A unique identifier for a user.\n            description:  \n              This id is automatically generated on the server when a user is created.\n            type: string\n            format: uuid\n          screenName:\n            title: The screen name for the user.\n            description: |\n              This is used for vanity type urls as well as login credentials.\n            type: string\n\npaths:\n    /tasks:\n        get:\n          operationId: listTasks\n          summary: Lists the tasks\n          description: |\n            List tasks.\n          responses:\n            200:\n              description: Successful response\n              schema:\n                title: TaskList\n                type: array\n                items:\n                  $ref: '#/definitions/Task'\n        post:\n          operationId: createTask\n          summary: Creates a 'Task' object.\n          description: |\n            Allows for creating a task.\n          parameters:\n            - name: body\n              in: body\n              description: The task to create\n              required: true\n              schema:\n                $ref: '#/definitions/Task'\n          responses:\n            201:\n              description: Task created\n\n    /tasks/{id}:\n        parameters:\n          - name: id\n            description: The id of the task\n            in: path\n            required: true\n            type: string\n            format: uuid\n        get:\n          operationId: viewTask\n          summary: Gets the details for a task.\n          description: |\n            The details view of a task.\n          responses:\n            200:\n              description: Task details\n              schema:\n                $ref: '#/definitions/Task'\n        put:\n          operationId: updateTask\n          summary: Updates the details for a task.\n          description: |\n            Allows for updating a task.\n          parameters:\n            - name: body\n              in: body\n              description: The task to update\n              required: true\n              schema:\n                $ref: '#/definitions/Task'\n          responses:\n            200:\n              description: Task details\n              schema:\n                $ref: '#/definitions/Task'", 
            "title": "Copy Example API Definition"
        }, 
        {
            "location": "/tutorials/server_golang/", 
            "text": "Generate API Server (Golang)\n\n\nSummary\n\n\nThis tutorial will explain how to generate an API server in golang using an API definition.\n\n\n\n\nInfo\n\n\nPrerequisite \nEnvironment Setup\n\n\n\n\n\n\nTip\n\n\n\n\n${PWD}\n works on Linux, MacOS, and Windows (via Powershell)\n\n\n%cd%\n works on Windows (via cmd)\n\n\n$(cygpath -m -a \"$(pwd)\")\n works on Windows (via Cygwin)\n\n\n\n\n\n\nValidate API Definition\n\n\ndocker run --rm -v ${PWD}:/local -w /local quay.io/goswagger/swagger validate task-tracker-api.yaml\n\n\n\n\nGenerate Server\n\n\nUpdate the GOPATH environment variable within the container by appending the base directory; e.g. \n/tracker\n.\nMount the project root directory to base directory \n/tracker/src/\nimport path\n where the \nimport path\n\nis how you import a golang package.\n\n\ndocker run --rm \\\n    -e GOPATH='/go:/tracker' \\\n    -v ${PWD}:/tracker/src/github.com/myorg/go-trackerclient \\\n    -w /tracker/src/github.com/myorg/go-trackerclient \\\n    quay.io/goswagger/swagger generate server \\\n        -A TrackerApi \\\n        -f task-tracker-api.yaml\n\n\n\n\nOutput:\n\n\n2017/10/06 02:05:24 building a plan for generation\n2017/10/06 02:05:24 planning definitions\n2017/10/06 02:05:24 planning operations\n2017/10/06 02:05:24 grouping operations into packages\n2017/10/06 02:05:24 planning meta data and facades\n2017/10/06 02:05:24 rendering 3 models\n2017/10/06 02:05:24 rendering 1 templates for model Task\n2017/10/06 02:05:24 name field Task\n2017/10/06 02:05:24 package field models\n2017/10/06 02:05:24 creating \ntask.go\n in \nmodels\n as definition\n2017/10/06 02:05:24 rendering 1 templates for model User\n2017/10/06 02:05:24 name field User\n2017/10/06 02:05:24 package field models\n2017/10/06 02:05:24 creating \nuser.go\n in \nmodels\n as definition\n2017/10/06 02:05:24 rendering 1 templates for model listTasksOKBody\n2017/10/06 02:05:24 name field listTasksOKBody\n2017/10/06 02:05:24 package field models\n2017/10/06 02:05:24 creating \nlist_tasks_o_k_body.go\n in \nmodels\n as definition\n2017/10/06 02:05:24 rendering 1 operation groups (tags)\n2017/10/06 02:05:24 rendering 4 operations for operations\n2017/10/06 02:05:24 rendering 4 templates for operation TrackerApi\n2017/10/06 02:05:24 name field createTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \ncreate_task_parameters.go\n in \nrestapi/operations\n as parameters\n2017/10/06 02:05:24 name field createTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \ncreate_task_urlbuilder.go\n in \nrestapi/operations\n as urlbuilder\n2017/10/06 02:05:24 name field createTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \ncreate_task_responses.go\n in \nrestapi/operations\n as responses\n2017/10/06 02:05:24 name field createTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \ncreate_task.go\n in \nrestapi/operations\n as handler\n2017/10/06 02:05:24 rendering 4 templates for operation TrackerApi\n2017/10/06 02:05:24 name field listTasks\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nlist_tasks_parameters.go\n in \nrestapi/operations\n as parameters\n2017/10/06 02:05:24 name field listTasks\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nlist_tasks_urlbuilder.go\n in \nrestapi/operations\n as urlbuilder\n2017/10/06 02:05:24 name field listTasks\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nlist_tasks_responses.go\n in \nrestapi/operations\n as responses\n2017/10/06 02:05:24 name field listTasks\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nlist_tasks.go\n in \nrestapi/operations\n as handler\n2017/10/06 02:05:24 rendering 4 templates for operation TrackerApi\n2017/10/06 02:05:24 name field updateTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nupdate_task_parameters.go\n in \nrestapi/operations\n as parameters\n2017/10/06 02:05:24 name field updateTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nupdate_task_urlbuilder.go\n in \nrestapi/operations\n as urlbuilder\n2017/10/06 02:05:24 name field updateTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nupdate_task_responses.go\n in \nrestapi/operations\n as responses\n2017/10/06 02:05:24 name field updateTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nupdate_task.go\n in \nrestapi/operations\n as handler\n2017/10/06 02:05:24 rendering 4 templates for operation TrackerApi\n2017/10/06 02:05:24 name field viewTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nview_task_parameters.go\n in \nrestapi/operations\n as parameters\n2017/10/06 02:05:24 name field viewTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nview_task_urlbuilder.go\n in \nrestapi/operations\n as urlbuilder\n2017/10/06 02:05:24 name field viewTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nview_task_responses.go\n in \nrestapi/operations\n as responses\n2017/10/06 02:05:24 name field viewTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nview_task.go\n in \nrestapi/operations\n as handler\n2017/10/06 02:05:24 rendering support\n2017/10/06 02:05:24 rendering 6 templates for application Tracker\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nconfigure_tracker.go\n in \nrestapi\n as configure\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nmain.go\n in \ncmd/tracker-server\n as main\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nembedded_spec.go\n in \nrestapi\n as embedded_spec\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \nserver.go\n in \nrestapi\n as server\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \ntracker_api.go\n in \nrestapi/operations\n as builder\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating \ndoc.go\n in \nrestapi\n as doc\nGeneration completed!\n\nFor this generation to compile you need to have some packages in your GOPATH:\n\n  * github.com/go-openapi/runtime\n  * github.com/tylerb/graceful\n  * github.com/jessevdk/go-flags\n\nYou can get these now with: go get -u -f ./...\n\n\n\n\nFiles:\n\n\n./cmd\n./cmd/tracker-server\n./cmd/tracker-server/main.go\n./models\n./models/list_tasks_o_k_body.go\n./models/task.go\n./models/user.go\n./restapi\n./restapi/configure_tracker.go\n./restapi/doc.go\n./restapi/embedded_spec.go\n./restapi/operations\n./restapi/operations/create_task.go\n./restapi/operations/create_task_parameters.go\n./restapi/operations/create_task_responses.go\n./restapi/operations/create_task_urlbuilder.go\n./restapi/operations/list_tasks.go\n./restapi/operations/list_tasks_parameters.go\n./restapi/operations/list_tasks_responses.go\n./restapi/operations/list_tasks_urlbuilder.go\n./restapi/operations/tracker_api.go\n./restapi/operations/update_task.go\n./restapi/operations/update_task_parameters.go\n./restapi/operations/update_task_responses.go\n./restapi/operations/update_task_urlbuilder.go\n./restapi/operations/view_task.go\n./restapi/operations/view_task_parameters.go\n./restapi/operations/view_task_responses.go\n./restapi/operations/view_task_urlbuilder.go\n./restapi/server.go\n./task-tracker-api.yaml", 
            "title": "Golang API Server"
        }, 
        {
            "location": "/tutorials/server_golang/#generate-api-server-golang", 
            "text": "", 
            "title": "Generate API Server (Golang)"
        }, 
        {
            "location": "/tutorials/server_golang/#summary", 
            "text": "This tutorial will explain how to generate an API server in golang using an API definition.   Info  Prerequisite  Environment Setup    Tip   ${PWD}  works on Linux, MacOS, and Windows (via Powershell)  %cd%  works on Windows (via cmd)  $(cygpath -m -a \"$(pwd)\")  works on Windows (via Cygwin)", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/server_golang/#validate-api-definition", 
            "text": "docker run --rm -v ${PWD}:/local -w /local quay.io/goswagger/swagger validate task-tracker-api.yaml", 
            "title": "Validate API Definition"
        }, 
        {
            "location": "/tutorials/server_golang/#generate-server", 
            "text": "Update the GOPATH environment variable within the container by appending the base directory; e.g.  /tracker .\nMount the project root directory to base directory  /tracker/src/ import path  where the  import path \nis how you import a golang package.  docker run --rm \\\n    -e GOPATH='/go:/tracker' \\\n    -v ${PWD}:/tracker/src/github.com/myorg/go-trackerclient \\\n    -w /tracker/src/github.com/myorg/go-trackerclient \\\n    quay.io/goswagger/swagger generate server \\\n        -A TrackerApi \\\n        -f task-tracker-api.yaml  Output:  2017/10/06 02:05:24 building a plan for generation\n2017/10/06 02:05:24 planning definitions\n2017/10/06 02:05:24 planning operations\n2017/10/06 02:05:24 grouping operations into packages\n2017/10/06 02:05:24 planning meta data and facades\n2017/10/06 02:05:24 rendering 3 models\n2017/10/06 02:05:24 rendering 1 templates for model Task\n2017/10/06 02:05:24 name field Task\n2017/10/06 02:05:24 package field models\n2017/10/06 02:05:24 creating  task.go  in  models  as definition\n2017/10/06 02:05:24 rendering 1 templates for model User\n2017/10/06 02:05:24 name field User\n2017/10/06 02:05:24 package field models\n2017/10/06 02:05:24 creating  user.go  in  models  as definition\n2017/10/06 02:05:24 rendering 1 templates for model listTasksOKBody\n2017/10/06 02:05:24 name field listTasksOKBody\n2017/10/06 02:05:24 package field models\n2017/10/06 02:05:24 creating  list_tasks_o_k_body.go  in  models  as definition\n2017/10/06 02:05:24 rendering 1 operation groups (tags)\n2017/10/06 02:05:24 rendering 4 operations for operations\n2017/10/06 02:05:24 rendering 4 templates for operation TrackerApi\n2017/10/06 02:05:24 name field createTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  create_task_parameters.go  in  restapi/operations  as parameters\n2017/10/06 02:05:24 name field createTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  create_task_urlbuilder.go  in  restapi/operations  as urlbuilder\n2017/10/06 02:05:24 name field createTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  create_task_responses.go  in  restapi/operations  as responses\n2017/10/06 02:05:24 name field createTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  create_task.go  in  restapi/operations  as handler\n2017/10/06 02:05:24 rendering 4 templates for operation TrackerApi\n2017/10/06 02:05:24 name field listTasks\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  list_tasks_parameters.go  in  restapi/operations  as parameters\n2017/10/06 02:05:24 name field listTasks\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  list_tasks_urlbuilder.go  in  restapi/operations  as urlbuilder\n2017/10/06 02:05:24 name field listTasks\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  list_tasks_responses.go  in  restapi/operations  as responses\n2017/10/06 02:05:24 name field listTasks\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  list_tasks.go  in  restapi/operations  as handler\n2017/10/06 02:05:24 rendering 4 templates for operation TrackerApi\n2017/10/06 02:05:24 name field updateTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  update_task_parameters.go  in  restapi/operations  as parameters\n2017/10/06 02:05:24 name field updateTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  update_task_urlbuilder.go  in  restapi/operations  as urlbuilder\n2017/10/06 02:05:24 name field updateTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  update_task_responses.go  in  restapi/operations  as responses\n2017/10/06 02:05:24 name field updateTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  update_task.go  in  restapi/operations  as handler\n2017/10/06 02:05:24 rendering 4 templates for operation TrackerApi\n2017/10/06 02:05:24 name field viewTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  view_task_parameters.go  in  restapi/operations  as parameters\n2017/10/06 02:05:24 name field viewTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  view_task_urlbuilder.go  in  restapi/operations  as urlbuilder\n2017/10/06 02:05:24 name field viewTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  view_task_responses.go  in  restapi/operations  as responses\n2017/10/06 02:05:24 name field viewTask\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  view_task.go  in  restapi/operations  as handler\n2017/10/06 02:05:24 rendering support\n2017/10/06 02:05:24 rendering 6 templates for application Tracker\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  configure_tracker.go  in  restapi  as configure\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  main.go  in  cmd/tracker-server  as main\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  embedded_spec.go  in  restapi  as embedded_spec\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  server.go  in  restapi  as server\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  tracker_api.go  in  restapi/operations  as builder\n2017/10/06 02:05:24 name field Tracker\n2017/10/06 02:05:24 package field operations\n2017/10/06 02:05:24 creating  doc.go  in  restapi  as doc\nGeneration completed!\n\nFor this generation to compile you need to have some packages in your GOPATH:\n\n  * github.com/go-openapi/runtime\n  * github.com/tylerb/graceful\n  * github.com/jessevdk/go-flags\n\nYou can get these now with: go get -u -f ./...  Files:  ./cmd\n./cmd/tracker-server\n./cmd/tracker-server/main.go\n./models\n./models/list_tasks_o_k_body.go\n./models/task.go\n./models/user.go\n./restapi\n./restapi/configure_tracker.go\n./restapi/doc.go\n./restapi/embedded_spec.go\n./restapi/operations\n./restapi/operations/create_task.go\n./restapi/operations/create_task_parameters.go\n./restapi/operations/create_task_responses.go\n./restapi/operations/create_task_urlbuilder.go\n./restapi/operations/list_tasks.go\n./restapi/operations/list_tasks_parameters.go\n./restapi/operations/list_tasks_responses.go\n./restapi/operations/list_tasks_urlbuilder.go\n./restapi/operations/tracker_api.go\n./restapi/operations/update_task.go\n./restapi/operations/update_task_parameters.go\n./restapi/operations/update_task_responses.go\n./restapi/operations/update_task_urlbuilder.go\n./restapi/operations/view_task.go\n./restapi/operations/view_task_parameters.go\n./restapi/operations/view_task_responses.go\n./restapi/operations/view_task_urlbuilder.go\n./restapi/server.go\n./task-tracker-api.yaml", 
            "title": "Generate Server"
        }, 
        {
            "location": "/tutorials/server_java/", 
            "text": "Generate API Server (Java)\n\n\nSummary\n\n\nThis tutorial will explain how to generate an API server in java using an API definition.\n\n\n\n\nInfo\n\n\nPrerequisite \nEnvironment Setup\n\n\n\n\n\n\nTip\n\n\n\n\n${PWD}\n works on Linux, MacOS, and Windows (via Powershell)\n\n\n%cd%\n works on Windows (via cmd)\n\n\n$(cygpath -m -a \"$(pwd)\")\n works on Windows (via Cygwin)\n\n\n\n\n\n\nValidate API Definition\n\n\ndocker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli validate \\\n    -i task-tracker-api.yaml\n\n\n\n\nGenerate Server\n\n\nFilename: \ncodegen_config.json\n\n\n{\n  \nartifactId\n: \ntracker\n,\n  \ngroupId\n: \ncom.example.tracker\n,\n  \nbasePackage\n: \ncom.example.tracker\n,\n  \napiPackage\n: \ncom.example.tracker.api\n,\n  \nconfigPackage\n: \ncom.example.tracker.config\n,\n  \nmodelPackage\n: \ncom.example.tracker.model\n,\n  \nhideGenerationTimestamp\n: true,\n  \ndateLibrary\n: \njava8\n,\n  \nuseBeanValidation\n: true,\n  \nlicenseUrl\n: \n\n}\n\n\n\n\ndocker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli generate \\\n    -i task-tracker-api.yaml \\\n    --lang spring \\\n    -c codegen_config.json\n\n\n\n\nOutput:\n\n\n[main] INFO io.swagger.parser.Swagger20Parser - reading from task-tracker-api.yaml\n[main] INFO io.swagger.codegen.ignore.CodegenIgnoreProcessor - No .swagger-codegen-ignore file found.\n[main] INFO io.swagger.codegen.DefaultCodegen - Invoker Package Name, originally not set, is now dervied from api package name: com.example.tracker\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/model/Task.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/model/User.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/TasksApiController.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/TasksApi.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./pom.xml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./README.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/config/HomeController.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/Swagger2SpringBoot.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/RFC3339DateFormat.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/resources/application.properties\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/ApiException.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/ApiResponseMessage.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/NotFoundException.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/ApiOriginFilter.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/config/SwaggerDocumentationConfig.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen-ignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen/VERSION\n\n\n\n\nFiles:\n\n\n./.swagger-codegen\n./.swagger-codegen/VERSION\n./.swagger-codegen-ignore\n./codegen_config.json\n./pom.xml\n./README.md\n./src\n./src/main\n./src/main/java\n./src/main/java/com\n./src/main/java/com/example\n./src/main/java/com/example/tracker\n./src/main/java/com/example/tracker/api\n./src/main/java/com/example/tracker/api/ApiException.java\n./src/main/java/com/example/tracker/api/ApiOriginFilter.java\n./src/main/java/com/example/tracker/api/ApiResponseMessage.java\n./src/main/java/com/example/tracker/api/NotFoundException.java\n./src/main/java/com/example/tracker/api/TasksApi.java\n./src/main/java/com/example/tracker/api/TasksApiController.java\n./src/main/java/com/example/tracker/config\n./src/main/java/com/example/tracker/config/HomeController.java\n./src/main/java/com/example/tracker/config/SwaggerDocumentationConfig.java\n./src/main/java/com/example/tracker/model\n./src/main/java/com/example/tracker/model/Task.java\n./src/main/java/com/example/tracker/model/User.java\n./src/main/java/com/example/tracker/RFC3339DateFormat.java\n./src/main/java/com/example/tracker/Swagger2SpringBoot.java\n./src/main/resources\n./src/main/resources/application.properties\n./task-tracker-api.yaml", 
            "title": "Java API Server"
        }, 
        {
            "location": "/tutorials/server_java/#generate-api-server-java", 
            "text": "", 
            "title": "Generate API Server (Java)"
        }, 
        {
            "location": "/tutorials/server_java/#summary", 
            "text": "This tutorial will explain how to generate an API server in java using an API definition.   Info  Prerequisite  Environment Setup    Tip   ${PWD}  works on Linux, MacOS, and Windows (via Powershell)  %cd%  works on Windows (via cmd)  $(cygpath -m -a \"$(pwd)\")  works on Windows (via Cygwin)", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/server_java/#validate-api-definition", 
            "text": "docker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli validate \\\n    -i task-tracker-api.yaml", 
            "title": "Validate API Definition"
        }, 
        {
            "location": "/tutorials/server_java/#generate-server", 
            "text": "Filename:  codegen_config.json  {\n   artifactId :  tracker ,\n   groupId :  com.example.tracker ,\n   basePackage :  com.example.tracker ,\n   apiPackage :  com.example.tracker.api ,\n   configPackage :  com.example.tracker.config ,\n   modelPackage :  com.example.tracker.model ,\n   hideGenerationTimestamp : true,\n   dateLibrary :  java8 ,\n   useBeanValidation : true,\n   licenseUrl :  \n}  docker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli generate \\\n    -i task-tracker-api.yaml \\\n    --lang spring \\\n    -c codegen_config.json  Output:  [main] INFO io.swagger.parser.Swagger20Parser - reading from task-tracker-api.yaml\n[main] INFO io.swagger.codegen.ignore.CodegenIgnoreProcessor - No .swagger-codegen-ignore file found.\n[main] INFO io.swagger.codegen.DefaultCodegen - Invoker Package Name, originally not set, is now dervied from api package name: com.example.tracker\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/model/Task.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/model/User.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/TasksApiController.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/TasksApi.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./pom.xml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./README.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/config/HomeController.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/Swagger2SpringBoot.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/RFC3339DateFormat.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/resources/application.properties\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/ApiException.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/ApiResponseMessage.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/NotFoundException.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/ApiOriginFilter.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/config/SwaggerDocumentationConfig.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen-ignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen/VERSION  Files:  ./.swagger-codegen\n./.swagger-codegen/VERSION\n./.swagger-codegen-ignore\n./codegen_config.json\n./pom.xml\n./README.md\n./src\n./src/main\n./src/main/java\n./src/main/java/com\n./src/main/java/com/example\n./src/main/java/com/example/tracker\n./src/main/java/com/example/tracker/api\n./src/main/java/com/example/tracker/api/ApiException.java\n./src/main/java/com/example/tracker/api/ApiOriginFilter.java\n./src/main/java/com/example/tracker/api/ApiResponseMessage.java\n./src/main/java/com/example/tracker/api/NotFoundException.java\n./src/main/java/com/example/tracker/api/TasksApi.java\n./src/main/java/com/example/tracker/api/TasksApiController.java\n./src/main/java/com/example/tracker/config\n./src/main/java/com/example/tracker/config/HomeController.java\n./src/main/java/com/example/tracker/config/SwaggerDocumentationConfig.java\n./src/main/java/com/example/tracker/model\n./src/main/java/com/example/tracker/model/Task.java\n./src/main/java/com/example/tracker/model/User.java\n./src/main/java/com/example/tracker/RFC3339DateFormat.java\n./src/main/java/com/example/tracker/Swagger2SpringBoot.java\n./src/main/resources\n./src/main/resources/application.properties\n./task-tracker-api.yaml", 
            "title": "Generate Server"
        }, 
        {
            "location": "/tutorials/server_python/", 
            "text": "Generate API Server (Python)\n\n\nSummary\n\n\nThis tutorial will explain how to generate an API server in python using an API definition.\n\n\n\n\nInfo\n\n\nPrerequisite \nEnvironment Setup\n\n\n\n\n\n\nTip\n\n\n\n\n${PWD}\n works on Linux, MacOS, and Windows (via Powershell)\n\n\n%cd%\n works on Windows (via cmd)\n\n\n$(cygpath -m -a \"$(pwd)\")\n works on Windows (via Cygwin)\n\n\n\n\n\n\nValidate API Definition\n\n\ndocker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli validate \\\n    -i task-tracker-api.yaml\n\n\n\n\nGenerate Server\n\n\nFilename: \ncodegen_config.json\n\n\n{\n  \npackageName\n: \nserver\n,\n  \nhideGenerationTimestamp\n: true,\n  \nsortParamsByRequiredFlag\n: true,\n  \nensureUniqueParams\n: true\n}\n\n\n\n\ndocker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli generate \\\n    -i task-tracker-api.yaml \\\n    --lang python-flask \\\n    -c codegen_config.json\n\n\n\n\nOutput:\n\n\n[main] INFO io.swagger.parser.Swagger20Parser - reading from task-tracker-api.yaml\n[main] INFO io.swagger.codegen.ignore.CodegenIgnoreProcessor - No .swagger-codegen-ignore file found.\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/models/task.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/models/user.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/controllers/default_controller.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/test/test_default_controller.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./README.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./setup.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./tox.ini\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test-requirements.txt\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./requirements.txt\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./git_push.sh\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.gitignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.travis.yml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./Dockerfile\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.dockerignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/__main__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/encoder.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/util.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/controllers/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/models/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/models/base_model_.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/test/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/swagger/swagger.yaml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen-ignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen/VERSION\n\n\n\n\nFiles:\n\n\n./.dockerignore\n./.gitignore\n./.swagger-codegen\n./.swagger-codegen/VERSION\n./.swagger-codegen-ignore\n./.travis.yml\n./codegen_config.json\n./Dockerfile\n./git_push.sh\n./README.md\n./requirements.txt\n./server\n./server/controllers\n./server/controllers/default_controller.py\n./server/controllers/__init__.py\n./server/encoder.py\n./server/models\n./server/models/base_model_.py\n./server/models/task.py\n./server/models/user.py\n./server/models/__init__.py\n./server/swagger\n./server/swagger/swagger.yaml\n./server/test\n./server/test/test_default_controller.py\n./server/test/__init__.py\n./server/util.py\n./server/__init__.py\n./server/__main__.py\n./setup.py\n./task-tracker-api.yaml\n./test-requirements.txt\n./tox.ini", 
            "title": "Python API Server"
        }, 
        {
            "location": "/tutorials/server_python/#generate-api-server-python", 
            "text": "", 
            "title": "Generate API Server (Python)"
        }, 
        {
            "location": "/tutorials/server_python/#summary", 
            "text": "This tutorial will explain how to generate an API server in python using an API definition.   Info  Prerequisite  Environment Setup    Tip   ${PWD}  works on Linux, MacOS, and Windows (via Powershell)  %cd%  works on Windows (via cmd)  $(cygpath -m -a \"$(pwd)\")  works on Windows (via Cygwin)", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/server_python/#validate-api-definition", 
            "text": "docker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli validate \\\n    -i task-tracker-api.yaml", 
            "title": "Validate API Definition"
        }, 
        {
            "location": "/tutorials/server_python/#generate-server", 
            "text": "Filename:  codegen_config.json  {\n   packageName :  server ,\n   hideGenerationTimestamp : true,\n   sortParamsByRequiredFlag : true,\n   ensureUniqueParams : true\n}  docker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli generate \\\n    -i task-tracker-api.yaml \\\n    --lang python-flask \\\n    -c codegen_config.json  Output:  [main] INFO io.swagger.parser.Swagger20Parser - reading from task-tracker-api.yaml\n[main] INFO io.swagger.codegen.ignore.CodegenIgnoreProcessor - No .swagger-codegen-ignore file found.\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/models/task.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/models/user.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/controllers/default_controller.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/test/test_default_controller.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./README.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./setup.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./tox.ini\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test-requirements.txt\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./requirements.txt\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./git_push.sh\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.gitignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.travis.yml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./Dockerfile\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.dockerignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/__main__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/encoder.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/util.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/controllers/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/models/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/models/base_model_.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/test/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./server/swagger/swagger.yaml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen-ignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen/VERSION  Files:  ./.dockerignore\n./.gitignore\n./.swagger-codegen\n./.swagger-codegen/VERSION\n./.swagger-codegen-ignore\n./.travis.yml\n./codegen_config.json\n./Dockerfile\n./git_push.sh\n./README.md\n./requirements.txt\n./server\n./server/controllers\n./server/controllers/default_controller.py\n./server/controllers/__init__.py\n./server/encoder.py\n./server/models\n./server/models/base_model_.py\n./server/models/task.py\n./server/models/user.py\n./server/models/__init__.py\n./server/swagger\n./server/swagger/swagger.yaml\n./server/test\n./server/test/test_default_controller.py\n./server/test/__init__.py\n./server/util.py\n./server/__init__.py\n./server/__main__.py\n./setup.py\n./task-tracker-api.yaml\n./test-requirements.txt\n./tox.ini", 
            "title": "Generate Server"
        }, 
        {
            "location": "/tutorials/client_golang/", 
            "text": "Generate API Client (Golang)\n\n\nSummary\n\n\nThis tutorial will explain how to generate an API client in golang using an API definition.\n\n\n\n\nInfo\n\n\nPrerequisite \nEnvironment Setup\n\n\n\n\n\n\nTip\n\n\n\n\n${PWD}\n works on Linux, MacOS, and Windows (via Powershell)\n\n\n%cd%\n works on Windows (via cmd)\n\n\n$(cygpath -m -a \"$(pwd)\")\n works on Windows (via Cygwin)\n\n\n\n\n\n\nValidate API Definition\n\n\ndocker run --rm -v ${PWD}:/local -w /local quay.io/goswagger/swagger validate task-tracker-api.yaml\n\n\n\n\nGenerate Client\n\n\nUpdate the GOPATH environment variable within the container by appending the base directory; e.g. \n/tracker\n.\nMount the project root directory to base directory \n/tracker/src/\nimport path\n where the \nimport path\n\nis how you import a golang package.\n\n\ndocker run --rm \\\n    -e GOPATH='/go:/tracker' \\\n    -v ${PWD}:/tracker/src/github.com/myorg/go-trackerclient \\\n    -w /tracker/src/github.com/myorg/go-trackerclient \\\n    quay.io/goswagger/swagger generate client \\\n        -A TrackerApi \\\n        -f task-tracker-api.yaml\n\n\n\n\nOutput:\n\n\n2017/10/06 01:55:25 building a plan for generation\n2017/10/06 01:55:25 planning definitions\n2017/10/06 01:55:25 planning operations\n2017/10/06 01:55:25 grouping operations into packages\n2017/10/06 01:55:25 planning meta data and facades\n2017/10/06 01:55:25 rendering 1 templates for model User\n2017/10/06 01:55:25 name field User\n2017/10/06 01:55:25 package field models\n2017/10/06 01:55:25 creating \nuser.go\n in \nmodels\n as definition\n2017/10/06 01:55:25 rendering 1 templates for model listTasksOKBody\n2017/10/06 01:55:25 name field listTasksOKBody\n2017/10/06 01:55:25 package field models\n2017/10/06 01:55:25 creating \nlist_tasks_o_k_body.go\n in \nmodels\n as definition\n2017/10/06 01:55:25 rendering 1 templates for model Task\n2017/10/06 01:55:25 name field Task\n2017/10/06 01:55:25 package field models\n2017/10/06 01:55:25 creating \ntask.go\n in \nmodels\n as definition\n2017/10/06 01:55:25 rendering 2 templates for operation\n2017/10/06 01:55:25 name field createTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating \ncreate_task_parameters.go\n in \nclient/operations\n as parameters\n2017/10/06 01:55:25 name field createTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating \ncreate_task_responses.go\n in \nclient/operations\n as responses\n2017/10/06 01:55:25 rendering 2 templates for operation\n2017/10/06 01:55:25 name field listTasks\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating \nlist_tasks_parameters.go\n in \nclient/operations\n as parameters\n2017/10/06 01:55:25 name field listTasks\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating \nlist_tasks_responses.go\n in \nclient/operations\n as responses\n2017/10/06 01:55:25 rendering 2 templates for operation\n2017/10/06 01:55:25 name field updateTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating \nupdate_task_parameters.go\n in \nclient/operations\n as parameters\n2017/10/06 01:55:25 name field updateTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating \nupdate_task_responses.go\n in \nclient/operations\n as responses\n2017/10/06 01:55:25 rendering 2 templates for operation\n2017/10/06 01:55:25 name field viewTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating \nview_task_parameters.go\n in \nclient/operations\n as parameters\n2017/10/06 01:55:25 name field viewTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating \nview_task_responses.go\n in \nclient/operations\n as responses\n2017/10/06 01:55:25 rendering 1 templates for operation group\n2017/10/06 01:55:25 name field operations\n2017/10/06 01:55:25 creating \noperations_client.go\n in \nclient/operations\n as client\n2017/10/06 01:55:25 rendering 1 templates for application Tracker\n2017/10/06 01:55:25 name field Tracker\n2017/10/06 01:55:25 package field client\n2017/10/06 01:55:25 creating \ntracker_client.go\n in \nclient\n as facade\nGeneration completed!\n\nFor this generation to compile you need to have some packages in your GOPATH:\n\n  * github.com/go-openapi/runtime\n  * golang.org/x/net/context\n  * golang.org/x/net/context/ctxhttp\n\nYou can get these now with: go get -u -f ./...\n\n\n\n\nFiles:\n\n\n./client\n./client/operations\n./client/operations/create_task_parameters.go\n./client/operations/create_task_responses.go\n./client/operations/list_tasks_parameters.go\n./client/operations/list_tasks_responses.go\n./client/operations/operations_client.go\n./client/operations/update_task_parameters.go\n./client/operations/update_task_responses.go\n./client/operations/view_task_parameters.go\n./client/operations/view_task_responses.go\n./client/tracker_client.go\n./models\n./models/list_tasks_o_k_body.go\n./models/task.go\n./models/user.go\n./task-tracker-api.yaml", 
            "title": "Golang API Client"
        }, 
        {
            "location": "/tutorials/client_golang/#generate-api-client-golang", 
            "text": "", 
            "title": "Generate API Client (Golang)"
        }, 
        {
            "location": "/tutorials/client_golang/#summary", 
            "text": "This tutorial will explain how to generate an API client in golang using an API definition.   Info  Prerequisite  Environment Setup    Tip   ${PWD}  works on Linux, MacOS, and Windows (via Powershell)  %cd%  works on Windows (via cmd)  $(cygpath -m -a \"$(pwd)\")  works on Windows (via Cygwin)", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/client_golang/#validate-api-definition", 
            "text": "docker run --rm -v ${PWD}:/local -w /local quay.io/goswagger/swagger validate task-tracker-api.yaml", 
            "title": "Validate API Definition"
        }, 
        {
            "location": "/tutorials/client_golang/#generate-client", 
            "text": "Update the GOPATH environment variable within the container by appending the base directory; e.g.  /tracker .\nMount the project root directory to base directory  /tracker/src/ import path  where the  import path \nis how you import a golang package.  docker run --rm \\\n    -e GOPATH='/go:/tracker' \\\n    -v ${PWD}:/tracker/src/github.com/myorg/go-trackerclient \\\n    -w /tracker/src/github.com/myorg/go-trackerclient \\\n    quay.io/goswagger/swagger generate client \\\n        -A TrackerApi \\\n        -f task-tracker-api.yaml  Output:  2017/10/06 01:55:25 building a plan for generation\n2017/10/06 01:55:25 planning definitions\n2017/10/06 01:55:25 planning operations\n2017/10/06 01:55:25 grouping operations into packages\n2017/10/06 01:55:25 planning meta data and facades\n2017/10/06 01:55:25 rendering 1 templates for model User\n2017/10/06 01:55:25 name field User\n2017/10/06 01:55:25 package field models\n2017/10/06 01:55:25 creating  user.go  in  models  as definition\n2017/10/06 01:55:25 rendering 1 templates for model listTasksOKBody\n2017/10/06 01:55:25 name field listTasksOKBody\n2017/10/06 01:55:25 package field models\n2017/10/06 01:55:25 creating  list_tasks_o_k_body.go  in  models  as definition\n2017/10/06 01:55:25 rendering 1 templates for model Task\n2017/10/06 01:55:25 name field Task\n2017/10/06 01:55:25 package field models\n2017/10/06 01:55:25 creating  task.go  in  models  as definition\n2017/10/06 01:55:25 rendering 2 templates for operation\n2017/10/06 01:55:25 name field createTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating  create_task_parameters.go  in  client/operations  as parameters\n2017/10/06 01:55:25 name field createTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating  create_task_responses.go  in  client/operations  as responses\n2017/10/06 01:55:25 rendering 2 templates for operation\n2017/10/06 01:55:25 name field listTasks\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating  list_tasks_parameters.go  in  client/operations  as parameters\n2017/10/06 01:55:25 name field listTasks\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating  list_tasks_responses.go  in  client/operations  as responses\n2017/10/06 01:55:25 rendering 2 templates for operation\n2017/10/06 01:55:25 name field updateTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating  update_task_parameters.go  in  client/operations  as parameters\n2017/10/06 01:55:25 name field updateTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating  update_task_responses.go  in  client/operations  as responses\n2017/10/06 01:55:25 rendering 2 templates for operation\n2017/10/06 01:55:25 name field viewTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating  view_task_parameters.go  in  client/operations  as parameters\n2017/10/06 01:55:25 name field viewTask\n2017/10/06 01:55:25 package field operations\n2017/10/06 01:55:25 creating  view_task_responses.go  in  client/operations  as responses\n2017/10/06 01:55:25 rendering 1 templates for operation group\n2017/10/06 01:55:25 name field operations\n2017/10/06 01:55:25 creating  operations_client.go  in  client/operations  as client\n2017/10/06 01:55:25 rendering 1 templates for application Tracker\n2017/10/06 01:55:25 name field Tracker\n2017/10/06 01:55:25 package field client\n2017/10/06 01:55:25 creating  tracker_client.go  in  client  as facade\nGeneration completed!\n\nFor this generation to compile you need to have some packages in your GOPATH:\n\n  * github.com/go-openapi/runtime\n  * golang.org/x/net/context\n  * golang.org/x/net/context/ctxhttp\n\nYou can get these now with: go get -u -f ./...  Files:  ./client\n./client/operations\n./client/operations/create_task_parameters.go\n./client/operations/create_task_responses.go\n./client/operations/list_tasks_parameters.go\n./client/operations/list_tasks_responses.go\n./client/operations/operations_client.go\n./client/operations/update_task_parameters.go\n./client/operations/update_task_responses.go\n./client/operations/view_task_parameters.go\n./client/operations/view_task_responses.go\n./client/tracker_client.go\n./models\n./models/list_tasks_o_k_body.go\n./models/task.go\n./models/user.go\n./task-tracker-api.yaml", 
            "title": "Generate Client"
        }, 
        {
            "location": "/tutorials/client_java/", 
            "text": "Generate API Client (Java)\n\n\nSummary\n\n\nThis tutorial will explain how to generate an API client in java using an API definition.\n\n\n\n\nInfo\n\n\nPrerequisite \nEnvironment Setup\n\n\n\n\n\n\nTip\n\n\n\n\n${PWD}\n works on Linux, MacOS, and Windows (via Powershell)\n\n\n%cd%\n works on Windows (via cmd)\n\n\n$(cygpath -m -a \"$(pwd)\")\n works on Windows (via Cygwin)\n\n\n\n\n\n\nValidate API Definition\n\n\ndocker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli validate \\\n    -i task-tracker-api.yaml\n\n\n\n\nGenerate Client\n\n\nFilename: \ncodegen_config.json\n\n\n{\n  \nartifactId\n: \ntracker\n,\n  \ngroupId\n: \ncom.example.tracker\n,\n  \nbasePackage\n: \ncom.example.tracker\n,\n  \napiPackage\n: \ncom.example.tracker.api\n,\n  \nconfigPackage\n: \ncom.example.tracker.config\n,\n  \nmodelPackage\n: \ncom.example.tracker.model\n,\n  \nhideGenerationTimestamp\n: true,\n  \ndateLibrary\n: \njava8\n,\n  \nuseBeanValidation\n: true,\n  \nlicenseUrl\n: \n\n}\n\n\n\n\ndocker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli generate \\\n    -i task-tracker-api.yaml \\\n    --lang java \\\n    -c codegen_config.json\n\n\n\n\nOutput:\n\n\n[main] INFO io.swagger.parser.Swagger20Parser - reading from task-tracker-api.yaml\n[main] INFO io.swagger.codegen.ignore.CodegenIgnoreProcessor - No .swagger-codegen-ignore file found.\n[main] INFO io.swagger.codegen.DefaultCodegen - Invoker Package Name, originally not set, is now dervied from api package name: com.example.tracker\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/model/Task.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/Task.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/model/User.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/User.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/DefaultApi.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/test/java/com/example/tracker/api/DefaultApiTest.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/DefaultApi.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./pom.xml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./README.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./build.gradle\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./build.sbt\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./settings.gradle\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./gradle.properties\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/AndroidManifest.xml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.travis.yml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ApiClient.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/StringUtil.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/auth/HttpBasicAuth.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/auth/ApiKeyAuth.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/auth/OAuth.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/auth/OAuthFlow.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./gradlew\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./gradlew.bat\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./gradle/wrapper/gradle-wrapper.properties\n[main] INFO io.swagger.codegen.DefaultGenerator - writing file /local/./gradle/wrapper/gradle-wrapper.jar\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./git_push.sh\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.gitignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ApiException.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/Configuration.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/Pair.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/auth/Authentication.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ApiCallback.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ApiResponse.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/JSON.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ProgressRequestBody.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ProgressResponseBody.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/GzipRequestInterceptor.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen-ignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen/VERSION\n\n\n\n\nFiles:\n\n\n./.gitignore\n./.swagger-codegen\n./.swagger-codegen/VERSION\n./.swagger-codegen-ignore\n./.travis.yml\n./build.gradle\n./build.sbt\n./codegen_config.json\n./docs\n./docs/DefaultApi.md\n./docs/Task.md\n./docs/User.md\n./git_push.sh\n./gradle\n./gradle/wrapper\n./gradle/wrapper/gradle-wrapper.jar\n./gradle/wrapper/gradle-wrapper.properties\n./gradle.properties\n./gradlew\n./gradlew.bat\n./pom.xml\n./README.md\n./settings.gradle\n./src\n./src/main\n./src/main/AndroidManifest.xml\n./src/main/java\n./src/main/java/com\n./src/main/java/com/example\n./src/main/java/com/example/tracker\n./src/main/java/com/example/tracker/api\n./src/main/java/com/example/tracker/api/DefaultApi.java\n./src/main/java/com/example/tracker/ApiCallback.java\n./src/main/java/com/example/tracker/ApiClient.java\n./src/main/java/com/example/tracker/ApiException.java\n./src/main/java/com/example/tracker/ApiResponse.java\n./src/main/java/com/example/tracker/auth\n./src/main/java/com/example/tracker/auth/ApiKeyAuth.java\n./src/main/java/com/example/tracker/auth/Authentication.java\n./src/main/java/com/example/tracker/auth/HttpBasicAuth.java\n./src/main/java/com/example/tracker/auth/OAuth.java\n./src/main/java/com/example/tracker/auth/OAuthFlow.java\n./src/main/java/com/example/tracker/Configuration.java\n./src/main/java/com/example/tracker/GzipRequestInterceptor.java\n./src/main/java/com/example/tracker/JSON.java\n./src/main/java/com/example/tracker/model\n./src/main/java/com/example/tracker/model/Task.java\n./src/main/java/com/example/tracker/model/User.java\n./src/main/java/com/example/tracker/Pair.java\n./src/main/java/com/example/tracker/ProgressRequestBody.java\n./src/main/java/com/example/tracker/ProgressResponseBody.java\n./src/main/java/com/example/tracker/StringUtil.java\n./src/test\n./src/test/java\n./src/test/java/com\n./src/test/java/com/example\n./src/test/java/com/example/tracker\n./src/test/java/com/example/tracker/api\n./src/test/java/com/example/tracker/api/DefaultApiTest.java\n./task-tracker-api.yaml", 
            "title": "Java API Client"
        }, 
        {
            "location": "/tutorials/client_java/#generate-api-client-java", 
            "text": "", 
            "title": "Generate API Client (Java)"
        }, 
        {
            "location": "/tutorials/client_java/#summary", 
            "text": "This tutorial will explain how to generate an API client in java using an API definition.   Info  Prerequisite  Environment Setup    Tip   ${PWD}  works on Linux, MacOS, and Windows (via Powershell)  %cd%  works on Windows (via cmd)  $(cygpath -m -a \"$(pwd)\")  works on Windows (via Cygwin)", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/client_java/#validate-api-definition", 
            "text": "docker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli validate \\\n    -i task-tracker-api.yaml", 
            "title": "Validate API Definition"
        }, 
        {
            "location": "/tutorials/client_java/#generate-client", 
            "text": "Filename:  codegen_config.json  {\n   artifactId :  tracker ,\n   groupId :  com.example.tracker ,\n   basePackage :  com.example.tracker ,\n   apiPackage :  com.example.tracker.api ,\n   configPackage :  com.example.tracker.config ,\n   modelPackage :  com.example.tracker.model ,\n   hideGenerationTimestamp : true,\n   dateLibrary :  java8 ,\n   useBeanValidation : true,\n   licenseUrl :  \n}  docker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli generate \\\n    -i task-tracker-api.yaml \\\n    --lang java \\\n    -c codegen_config.json  Output:  [main] INFO io.swagger.parser.Swagger20Parser - reading from task-tracker-api.yaml\n[main] INFO io.swagger.codegen.ignore.CodegenIgnoreProcessor - No .swagger-codegen-ignore file found.\n[main] INFO io.swagger.codegen.DefaultCodegen - Invoker Package Name, originally not set, is now dervied from api package name: com.example.tracker\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/model/Task.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/Task.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/model/User.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/User.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/api/DefaultApi.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/test/java/com/example/tracker/api/DefaultApiTest.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/DefaultApi.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./pom.xml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./README.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./build.gradle\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./build.sbt\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./settings.gradle\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./gradle.properties\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/AndroidManifest.xml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.travis.yml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ApiClient.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/StringUtil.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/auth/HttpBasicAuth.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/auth/ApiKeyAuth.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/auth/OAuth.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/auth/OAuthFlow.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./gradlew\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./gradlew.bat\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./gradle/wrapper/gradle-wrapper.properties\n[main] INFO io.swagger.codegen.DefaultGenerator - writing file /local/./gradle/wrapper/gradle-wrapper.jar\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./git_push.sh\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.gitignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ApiException.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/Configuration.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/Pair.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/auth/Authentication.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ApiCallback.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ApiResponse.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/JSON.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ProgressRequestBody.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/ProgressResponseBody.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./src/main/java/com/example/tracker/GzipRequestInterceptor.java\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen-ignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen/VERSION  Files:  ./.gitignore\n./.swagger-codegen\n./.swagger-codegen/VERSION\n./.swagger-codegen-ignore\n./.travis.yml\n./build.gradle\n./build.sbt\n./codegen_config.json\n./docs\n./docs/DefaultApi.md\n./docs/Task.md\n./docs/User.md\n./git_push.sh\n./gradle\n./gradle/wrapper\n./gradle/wrapper/gradle-wrapper.jar\n./gradle/wrapper/gradle-wrapper.properties\n./gradle.properties\n./gradlew\n./gradlew.bat\n./pom.xml\n./README.md\n./settings.gradle\n./src\n./src/main\n./src/main/AndroidManifest.xml\n./src/main/java\n./src/main/java/com\n./src/main/java/com/example\n./src/main/java/com/example/tracker\n./src/main/java/com/example/tracker/api\n./src/main/java/com/example/tracker/api/DefaultApi.java\n./src/main/java/com/example/tracker/ApiCallback.java\n./src/main/java/com/example/tracker/ApiClient.java\n./src/main/java/com/example/tracker/ApiException.java\n./src/main/java/com/example/tracker/ApiResponse.java\n./src/main/java/com/example/tracker/auth\n./src/main/java/com/example/tracker/auth/ApiKeyAuth.java\n./src/main/java/com/example/tracker/auth/Authentication.java\n./src/main/java/com/example/tracker/auth/HttpBasicAuth.java\n./src/main/java/com/example/tracker/auth/OAuth.java\n./src/main/java/com/example/tracker/auth/OAuthFlow.java\n./src/main/java/com/example/tracker/Configuration.java\n./src/main/java/com/example/tracker/GzipRequestInterceptor.java\n./src/main/java/com/example/tracker/JSON.java\n./src/main/java/com/example/tracker/model\n./src/main/java/com/example/tracker/model/Task.java\n./src/main/java/com/example/tracker/model/User.java\n./src/main/java/com/example/tracker/Pair.java\n./src/main/java/com/example/tracker/ProgressRequestBody.java\n./src/main/java/com/example/tracker/ProgressResponseBody.java\n./src/main/java/com/example/tracker/StringUtil.java\n./src/test\n./src/test/java\n./src/test/java/com\n./src/test/java/com/example\n./src/test/java/com/example/tracker\n./src/test/java/com/example/tracker/api\n./src/test/java/com/example/tracker/api/DefaultApiTest.java\n./task-tracker-api.yaml", 
            "title": "Generate Client"
        }, 
        {
            "location": "/tutorials/client_python/", 
            "text": "Generate API Client (Python)\n\n\nSummary\n\n\nThis tutorial will explain how to generate an API client in python using an API definition.\n\n\n\n\nInfo\n\n\nPrerequisite \nEnvironment Setup\n\n\n\n\n\n\nTip\n\n\n\n\n${PWD}\n works on Linux, MacOS, and Windows (via Powershell)\n\n\n%cd%\n works on Windows (via cmd)\n\n\n$(cygpath -m -a \"$(pwd)\")\n works on Windows (via Cygwin)\n\n\n\n\n\n\nValidate API Definition\n\n\ndocker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli validate \\\n    -i task-tracker-api.yaml\n\n\n\n\nGenerate Client\n\n\nFilename: \ncodegen_config.json\n\n\n{\n  \npackageName\n: \nclient\n,\n  \nprojectName\n: \ntrackerapi\n,\n  \nhideGenerationTimestamp\n: true,\n  \nsortParamsByRequiredFlag\n: true\n}\n\n\n\n\ndocker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli generate \\\n    -i task-tracker-api.yaml \\\n    --lang python \\\n    -c codegen_config.json\n\n\n\n\nOutput:\n\n\n[main] INFO io.swagger.parser.Swagger20Parser - reading from task-tracker-api.yaml\n[main] INFO io.swagger.codegen.ignore.CodegenIgnoreProcessor - No .swagger-codegen-ignore file found.\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/models/task.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test/test_task.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/Task.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/models/user.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test/test_user.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/User.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/apis/default_api.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test/test_default_api.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/DefaultApi.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./README.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./tox.ini\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test-requirements.txt\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./requirements.txt\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/configuration.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/models/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/apis/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./git_push.sh\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.gitignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.travis.yml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./setup.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/api_client.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/rest.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen-ignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen/VERSION\n\n\n\n\nFiles:\n\n\n./.gitignore\n./.swagger-codegen\n./.swagger-codegen/VERSION\n./.swagger-codegen-ignore\n./.travis.yml\n./client\n./client/apis\n./client/apis/default_api.py\n./client/apis/__init__.py\n./client/api_client.py\n./client/configuration.py\n./client/models\n./client/models/task.py\n./client/models/user.py\n./client/models/__init__.py\n./client/rest.py\n./client/__init__.py\n./codegen_config.json\n./docs\n./docs/DefaultApi.md\n./docs/Task.md\n./docs/User.md\n./git_push.sh\n./README.md\n./requirements.txt\n./setup.py\n./task-tracker-api.yaml\n./test\n./test/test_default_api.py\n./test/test_task.py\n./test/test_user.py\n./test/__init__.py\n./test-requirements.txt\n./tox.ini", 
            "title": "Python API Client"
        }, 
        {
            "location": "/tutorials/client_python/#generate-api-client-python", 
            "text": "", 
            "title": "Generate API Client (Python)"
        }, 
        {
            "location": "/tutorials/client_python/#summary", 
            "text": "This tutorial will explain how to generate an API client in python using an API definition.   Info  Prerequisite  Environment Setup    Tip   ${PWD}  works on Linux, MacOS, and Windows (via Powershell)  %cd%  works on Windows (via cmd)  $(cygpath -m -a \"$(pwd)\")  works on Windows (via Cygwin)", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/client_python/#validate-api-definition", 
            "text": "docker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli validate \\\n    -i task-tracker-api.yaml", 
            "title": "Validate API Definition"
        }, 
        {
            "location": "/tutorials/client_python/#generate-client", 
            "text": "Filename:  codegen_config.json  {\n   packageName :  client ,\n   projectName :  trackerapi ,\n   hideGenerationTimestamp : true,\n   sortParamsByRequiredFlag : true\n}  docker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli generate \\\n    -i task-tracker-api.yaml \\\n    --lang python \\\n    -c codegen_config.json  Output:  [main] INFO io.swagger.parser.Swagger20Parser - reading from task-tracker-api.yaml\n[main] INFO io.swagger.codegen.ignore.CodegenIgnoreProcessor - No .swagger-codegen-ignore file found.\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/models/task.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test/test_task.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/Task.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/models/user.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test/test_user.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/User.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/apis/default_api.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test/test_default_api.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./docs/DefaultApi.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./README.md\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./tox.ini\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test-requirements.txt\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./requirements.txt\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/configuration.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/models/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/apis/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./test/__init__.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./git_push.sh\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.gitignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.travis.yml\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./setup.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/api_client.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./client/rest.py\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen-ignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/./.swagger-codegen/VERSION  Files:  ./.gitignore\n./.swagger-codegen\n./.swagger-codegen/VERSION\n./.swagger-codegen-ignore\n./.travis.yml\n./client\n./client/apis\n./client/apis/default_api.py\n./client/apis/__init__.py\n./client/api_client.py\n./client/configuration.py\n./client/models\n./client/models/task.py\n./client/models/user.py\n./client/models/__init__.py\n./client/rest.py\n./client/__init__.py\n./codegen_config.json\n./docs\n./docs/DefaultApi.md\n./docs/Task.md\n./docs/User.md\n./git_push.sh\n./README.md\n./requirements.txt\n./setup.py\n./task-tracker-api.yaml\n./test\n./test/test_default_api.py\n./test/test_task.py\n./test/test_user.py\n./test/__init__.py\n./test-requirements.txt\n./tox.ini", 
            "title": "Generate Client"
        }, 
        {
            "location": "/tutorials/client_postman/", 
            "text": "Generate API Client (Postman)\n\n\nSummary\n\n\nThis tutorial will explain how to generate an API client in \nPostman\n using an API definition.\n\n\nInstall Postman\n\n\nGo to https://www.getpostman.com/ and follow the directions for installing Postman on your local computer.\n\n\nGenerate Client\n\n\n\n\nLaunch Postman\n\n\nClick \nimport\n button at the top on the left hand side of the Postman application.\n\n\nClick \nChoose Files\n and navigate to the file \ntask-tracker-api.yaml\n.\n\n\n\n\nYou should now see a Collection named \nIssue Tracker\n in the list.\n\n\nTo learn more about Postman, you can read the \nPostman Docs\n.", 
            "title": "Postman API Client"
        }, 
        {
            "location": "/tutorials/client_postman/#generate-api-client-postman", 
            "text": "", 
            "title": "Generate API Client (Postman)"
        }, 
        {
            "location": "/tutorials/client_postman/#summary", 
            "text": "This tutorial will explain how to generate an API client in  Postman  using an API definition.", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/client_postman/#install-postman", 
            "text": "Go to https://www.getpostman.com/ and follow the directions for installing Postman on your local computer.", 
            "title": "Install Postman"
        }, 
        {
            "location": "/tutorials/client_postman/#generate-client", 
            "text": "Launch Postman  Click  import  button at the top on the left hand side of the Postman application.  Click  Choose Files  and navigate to the file  task-tracker-api.yaml .   You should now see a Collection named  Issue Tracker  in the list.  To learn more about Postman, you can read the  Postman Docs .", 
            "title": "Generate Client"
        }, 
        {
            "location": "/tutorials/documentation/", 
            "text": "Generate API Documentation\n\n\nSummary\n\n\nThis tutorial will explain how to generate documentation using an API definition.\n\n\n\n\nInfo\n\n\nPrerequisite \nEnvironment Setup\n\n\n\n\n\n\nTip\n\n\n\n\n${PWD}\n works on Linux, MacOS, and Windows (via Powershell)\n\n\n%cd%\n works on Windows (via cmd)\n\n\n$(cygpath -m -a \"$(pwd)\")\n works on Windows (via Cygwin)\n\n\n\n\n\n\nValidate API Definition\n\n\ndocker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli validate \\\n    -i task-tracker-api.yaml\n\n\n\n\nGenerate HTML Documentation\n\n\ndocker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli generate \\\n    -i task-tracker-api.yaml \\\n    -l html \\\n    -o /local/docs\n\n\n\n\nOutput:\n\n\n[main] INFO io.swagger.parser.Swagger20Parser - reading from task-tracker-api.yaml\n[main] WARN io.swagger.codegen.ignore.CodegenIgnoreProcessor - Output directory does not exist, or is inaccessible. No file (.swager-codegen-ignore) will be evaluated.\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/docs/index.html\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/docs/.swagger-codegen-ignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/docs/.swagger-codegen/VERSION\n\n\n\n\nFiles:\n\n\n./docs\n./docs/.swagger-codegen\n./docs/.swagger-codegen/VERSION\n./docs/.swagger-codegen-ignore\n./docs/index.html\n./task-tracker-api.yaml\n\n\n\n\nGenerate Markdown Documentation\n\n\nFilename: \nconfig.properties\n\n\nswagger2markup.markupLanguage=MARKDOWN\n\n\n\n\ndocker run --rm -v ${PWD}:/local -w /local swagger2markup/swagger2markup convert \\\n    -i task-tracker-api.yaml \\\n    -c config.properties \\\n    -d /local/docs\n\n\n\n\nOutput:\n\n\n01:06:16.904 [main] INFO  io.swagger.parser.Swagger20Parser - reading from /local/task-tracker-api.yaml\n01:06:17.292 [main] DEBUG i.g.s.i.document.PathsDocument - Generate examples is disabled.\n01:06:17.292 [main] DEBUG i.g.s.i.document.PathsDocument - Create separated operation files is disabled.\n01:06:17.293 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Create separated definition files is disabled.\n01:06:17.335 [main] INFO  i.g.s.m.b.i.markdown.MarkdownBuilder - Markup document written to: /local/docs/overview.md\n01:06:17.417 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'createTask' (normalized id = 'createTask')\n01:06:17.421 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'listTasks' (normalized id = 'listTasks')\n01:06:17.423 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'viewTask' (normalized id = 'viewTask')\n01:06:17.425 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'updateTask' (normalized id = 'updateTask')\n01:06:17.433 [main] INFO  i.g.s.m.b.i.markdown.MarkdownBuilder - Markup document written to: /local/docs/paths.md\n01:06:17.436 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Definition processed : 'Task'\n01:06:17.443 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Definition processed : 'User'\n01:06:17.456 [main] INFO  i.g.s.m.b.i.markdown.MarkdownBuilder - Markup document written to: /local/docs/definitions.md\n01:06:17.463 [main] INFO  i.g.s.m.b.i.markdown.MarkdownBuilder - Markup document written to: /local/docs/security.md\n\n\n\n\nFiles:\n\n\n./config.properties\n./docs\n./docs/definitions.md\n./docs/overview.md\n./docs/paths.md\n./docs/security.md\n./task-tracker-api.yaml\n\n\n\n\nGenerate AsciiDoc Documentation\n\n\nFilename: \nconfig.properties\n\n\nswagger2markup.markupLanguage=ASCIIDOC\n\n\n\n\ndocker run --rm -v ${PWD}:/local -w /local swagger2markup/swagger2markup convert \\\n    -i task-tracker-api.yaml \\\n    -c config.properties \\\n    -d /local/docs\n\n\n\n\nOutput:\n\n\n01:08:52.218 [main] INFO  io.swagger.parser.Swagger20Parser - reading from /local/task-tracker-api.yaml\n01:08:52.671 [main] DEBUG i.g.s.i.document.PathsDocument - Generate examples is disabled.\n01:08:52.671 [main] DEBUG i.g.s.i.document.PathsDocument - Create separated operation files is disabled.\n01:08:52.672 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Create separated definition files is disabled.\n01:08:52.968 [main] INFO  i.g.s.m.b.i.asciidoc.AsciiDocBuilder - Markup document written to: /local/docs/overview.adoc\n01:08:53.098 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'createTask' (normalized id = 'createTask')\n01:08:53.108 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'listTasks' (normalized id = 'listTasks')\n01:08:53.132 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'viewTask' (normalized id = 'viewTask')\n01:08:53.146 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'updateTask' (normalized id = 'updateTask')\n01:08:53.157 [main] INFO  i.g.s.m.b.i.asciidoc.AsciiDocBuilder - Markup document written to: /local/docs/paths.adoc\n01:08:53.161 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Definition processed : 'Task'\n01:08:53.203 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Definition processed : 'User'\n01:08:53.230 [main] INFO  i.g.s.m.b.i.asciidoc.AsciiDocBuilder - Markup document written to: /local/docs/definitions.adoc\n01:08:53.239 [main] INFO  i.g.s.m.b.i.asciidoc.AsciiDocBuilder - Markup document written to: /local/docs/security.adoc\n\n\n\n\nFiles:\n\n\n./config.properties\n./docs\n./docs/definitions.adoc\n./docs/overview.adoc\n./docs/paths.adoc\n./docs/security.adoc\n./task-tracker-api.yaml\n\n\n\n\nOptionally convert generated AsciiDoc file(s) and any other custom AsciiDoc file(s) to \nhtml5\n\n\nFilename: \ndocs/index.adoc\n\n\ninclude::overview.adoc[]\ninclude::security.adoc[]\ninclude::paths.adoc[]\ninclude::definitions.adoc[]\n\n\n\n\ndocker run --rm -v ${PWD}:/local -w /local asciidoctor/docker-asciidoctor asciidoctor -v \\\n    -a doctype=book \\\n    -b html5 \\\n    -D content /local/docs/index.adoc\n\n\n\n\nOutput: N/A\n\n\nFiles:\n\n\n./config.properties\n./content\n./content/index.html\n./docs\n./docs/definitions.adoc\n./docs/index.adoc\n./docs/overview.adoc\n./docs/paths.adoc\n./docs/security.adoc\n./task-tracker-api.yaml", 
            "title": "Generating Documentation"
        }, 
        {
            "location": "/tutorials/documentation/#generate-api-documentation", 
            "text": "", 
            "title": "Generate API Documentation"
        }, 
        {
            "location": "/tutorials/documentation/#summary", 
            "text": "This tutorial will explain how to generate documentation using an API definition.   Info  Prerequisite  Environment Setup    Tip   ${PWD}  works on Linux, MacOS, and Windows (via Powershell)  %cd%  works on Windows (via cmd)  $(cygpath -m -a \"$(pwd)\")  works on Windows (via Cygwin)", 
            "title": "Summary"
        }, 
        {
            "location": "/tutorials/documentation/#validate-api-definition", 
            "text": "docker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli validate \\\n    -i task-tracker-api.yaml", 
            "title": "Validate API Definition"
        }, 
        {
            "location": "/tutorials/documentation/#generate-html-documentation", 
            "text": "docker run --rm -v ${PWD}:/local -w /local swaggerapi/swagger-codegen-cli generate \\\n    -i task-tracker-api.yaml \\\n    -l html \\\n    -o /local/docs  Output:  [main] INFO io.swagger.parser.Swagger20Parser - reading from task-tracker-api.yaml\n[main] WARN io.swagger.codegen.ignore.CodegenIgnoreProcessor - Output directory does not exist, or is inaccessible. No file (.swager-codegen-ignore) will be evaluated.\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/docs/index.html\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/docs/.swagger-codegen-ignore\n[main] INFO io.swagger.codegen.AbstractGenerator - writing file /local/docs/.swagger-codegen/VERSION  Files:  ./docs\n./docs/.swagger-codegen\n./docs/.swagger-codegen/VERSION\n./docs/.swagger-codegen-ignore\n./docs/index.html\n./task-tracker-api.yaml", 
            "title": "Generate HTML Documentation"
        }, 
        {
            "location": "/tutorials/documentation/#generate-markdown-documentation", 
            "text": "Filename:  config.properties  swagger2markup.markupLanguage=MARKDOWN  docker run --rm -v ${PWD}:/local -w /local swagger2markup/swagger2markup convert \\\n    -i task-tracker-api.yaml \\\n    -c config.properties \\\n    -d /local/docs  Output:  01:06:16.904 [main] INFO  io.swagger.parser.Swagger20Parser - reading from /local/task-tracker-api.yaml\n01:06:17.292 [main] DEBUG i.g.s.i.document.PathsDocument - Generate examples is disabled.\n01:06:17.292 [main] DEBUG i.g.s.i.document.PathsDocument - Create separated operation files is disabled.\n01:06:17.293 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Create separated definition files is disabled.\n01:06:17.335 [main] INFO  i.g.s.m.b.i.markdown.MarkdownBuilder - Markup document written to: /local/docs/overview.md\n01:06:17.417 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'createTask' (normalized id = 'createTask')\n01:06:17.421 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'listTasks' (normalized id = 'listTasks')\n01:06:17.423 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'viewTask' (normalized id = 'viewTask')\n01:06:17.425 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'updateTask' (normalized id = 'updateTask')\n01:06:17.433 [main] INFO  i.g.s.m.b.i.markdown.MarkdownBuilder - Markup document written to: /local/docs/paths.md\n01:06:17.436 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Definition processed : 'Task'\n01:06:17.443 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Definition processed : 'User'\n01:06:17.456 [main] INFO  i.g.s.m.b.i.markdown.MarkdownBuilder - Markup document written to: /local/docs/definitions.md\n01:06:17.463 [main] INFO  i.g.s.m.b.i.markdown.MarkdownBuilder - Markup document written to: /local/docs/security.md  Files:  ./config.properties\n./docs\n./docs/definitions.md\n./docs/overview.md\n./docs/paths.md\n./docs/security.md\n./task-tracker-api.yaml", 
            "title": "Generate Markdown Documentation"
        }, 
        {
            "location": "/tutorials/documentation/#generate-asciidoc-documentation", 
            "text": "Filename:  config.properties  swagger2markup.markupLanguage=ASCIIDOC  docker run --rm -v ${PWD}:/local -w /local swagger2markup/swagger2markup convert \\\n    -i task-tracker-api.yaml \\\n    -c config.properties \\\n    -d /local/docs  Output:  01:08:52.218 [main] INFO  io.swagger.parser.Swagger20Parser - reading from /local/task-tracker-api.yaml\n01:08:52.671 [main] DEBUG i.g.s.i.document.PathsDocument - Generate examples is disabled.\n01:08:52.671 [main] DEBUG i.g.s.i.document.PathsDocument - Create separated operation files is disabled.\n01:08:52.672 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Create separated definition files is disabled.\n01:08:52.968 [main] INFO  i.g.s.m.b.i.asciidoc.AsciiDocBuilder - Markup document written to: /local/docs/overview.adoc\n01:08:53.098 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'createTask' (normalized id = 'createTask')\n01:08:53.108 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'listTasks' (normalized id = 'listTasks')\n01:08:53.132 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'viewTask' (normalized id = 'viewTask')\n01:08:53.146 [main] DEBUG i.g.s.i.document.PathsDocument - Operation processed : 'updateTask' (normalized id = 'updateTask')\n01:08:53.157 [main] INFO  i.g.s.m.b.i.asciidoc.AsciiDocBuilder - Markup document written to: /local/docs/paths.adoc\n01:08:53.161 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Definition processed : 'Task'\n01:08:53.203 [main] DEBUG i.g.s.i.document.DefinitionsDocument - Definition processed : 'User'\n01:08:53.230 [main] INFO  i.g.s.m.b.i.asciidoc.AsciiDocBuilder - Markup document written to: /local/docs/definitions.adoc\n01:08:53.239 [main] INFO  i.g.s.m.b.i.asciidoc.AsciiDocBuilder - Markup document written to: /local/docs/security.adoc  Files:  ./config.properties\n./docs\n./docs/definitions.adoc\n./docs/overview.adoc\n./docs/paths.adoc\n./docs/security.adoc\n./task-tracker-api.yaml  Optionally convert generated AsciiDoc file(s) and any other custom AsciiDoc file(s) to  html5  Filename:  docs/index.adoc  include::overview.adoc[]\ninclude::security.adoc[]\ninclude::paths.adoc[]\ninclude::definitions.adoc[]  docker run --rm -v ${PWD}:/local -w /local asciidoctor/docker-asciidoctor asciidoctor -v \\\n    -a doctype=book \\\n    -b html5 \\\n    -D content /local/docs/index.adoc  Output: N/A  Files:  ./config.properties\n./content\n./content/index.html\n./docs\n./docs/definitions.adoc\n./docs/index.adoc\n./docs/overview.adoc\n./docs/paths.adoc\n./docs/security.adoc\n./task-tracker-api.yaml", 
            "title": "Generate AsciiDoc Documentation"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nunlicense\n\n\nThis is free and unencumbered software released into the public domain.\n\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n\nFor more information, please refer to \nunlicense.org", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "unlicense  This is free and unencumbered software released into the public domain.  Anyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.  In jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.  For more information, please refer to  unlicense.org", 
            "title": "License"
        }
    ]
}